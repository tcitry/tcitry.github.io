<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017 on LYon's Blog</title><link>https://yindongliang.com/categories/2017/</link><description>Recent content in 2017 on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 09 Feb 2025 22:44:11 +0800</lastBuildDate><atom:link href="https://yindongliang.com/categories/2017/index.xml" rel="self" type="application/rss+xml"/><item><title>Django 的中间件执行顺序</title><link>https://yindongliang.com/posts/django-middleware/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/django-middleware/</guid><description>&lt;p>中间件是 Django 用来处理请求和响应的钩子框架。它是一个轻量级的、底层级的“插件”系统，用于全局性地控制 Django 的输入或输出。&lt;/p>
&lt;h2 id="middleware">MIDDLEWARE&lt;a class="anchor" href="#middleware">#&lt;/a>&lt;/h2>
&lt;p>Django 自带了一些已经内置的中间件，你可以直接使用，它们被记录在 &lt;a href="https://docs.djangoproject.com/zh-hans/4.0/ref/middleware/">built-in middleware reference&lt;/a> 中。&lt;/p></description></item><item><title>数据库的 join 连接类型</title><link>https://yindongliang.com/posts/sql-join/</link><pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/sql-join/</guid><description>&lt;h2 id="内连接">内连接&lt;a class="anchor" href="#%e5%86%85%e8%bf%9e%e6%8e%a5">#&lt;/a>&lt;/h2>
&lt;p>内连接为默认连接方式，只有两张表都匹配的行才显示。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">SELECT&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#76a9f9">from&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span> &lt;span style="color:#76a9f9">INNER&lt;/span> &lt;span style="color:#76a9f9">JOIN&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span> &lt;span style="color:#76a9f9">on&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="左外连接">左（外）连接&lt;a class="anchor" href="#%e5%b7%a6%e5%a4%96%e8%bf%9e%e6%8e%a5">#&lt;/a>&lt;/h2>
&lt;p>左边的表不加限制，会全部显示出来，右边的只会显示符合搜索条件的记录，不匹配的记录会以 null 显示。&lt;/p></description></item><item><title>Django 的软删除设计</title><link>https://yindongliang.com/posts/django-soft-delete/</link><pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/django-soft-delete/</guid><description>&lt;p>设计一个 Django 的软删除方案，要求数据库在删除的时候不能物理删除数据，同时尽量不要太侵入代码业务。&lt;/p>
&lt;p>这里用到了 Django 的 Manager，它赋予了 Django Model 操作数据库的能力，每个 Model 都包含一个 Manager，比如我们常用的 &lt;code>objects&lt;/code> 就是默认的 Manger。&lt;/p></description></item></channel></rss>