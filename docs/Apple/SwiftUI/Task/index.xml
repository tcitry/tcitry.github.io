<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Task on LYon's Blog</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/</link><description>Recent content in Task on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://yindongliang.com/docs/Apple/SwiftUI/Task/index.xml" rel="self" type="application/rss+xml"/><item><title>TaskPriority</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskPriority/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskPriority/</guid><description>&lt;p>在 Swift 的并发编程模型中，&lt;a href="https://developer.apple.com/documentation/swift/taskpriority">&lt;code>TaskPriority&lt;/code>&lt;/a> 用于定义任务的执行优先级，帮助系统调度器决定任务的执行顺序。以下是 &lt;code>TaskPriority&lt;/code> 中各个优先级的详细介绍、使用场景及示例：&lt;/p>
&lt;hr>
&lt;h3 id="taskpriority-优先级类型">&lt;code>TaskPriority&lt;/code> 优先级类型&lt;a class="anchor" href="#taskpriority-%e4%bc%98%e5%85%88%e7%ba%a7%e7%b1%bb%e5%9e%8b">#&lt;/a>&lt;/h3>
&lt;p>Swift 提供了以下优先级类型（从高到低）：&lt;/p></description></item><item><title>translationTask</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/translationTask/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/translationTask/</guid><description>&lt;p>在 iOS 开发中，&lt;code>translationTask&lt;/code> 是 iOS 18 及更高版本引入的 SwiftUI 修饰符，允许开发者在应用内直接集成翻译功能，无需依赖系统弹窗。以下是其使用方法的详细介绍：&lt;/p></description></item><item><title>backgroundTask</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/backgroundTask/</link><pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/backgroundTask/</guid><description>&lt;p>SwiftUI 的 &lt;strong>backgroundTask&lt;/strong> 是一种用于在 App 进入后台时执行特定任务的机制，它让你能够在系统即将暂停你的 App 前获得一个短暂的后台执行时间窗口，以完成一些关键工作（如保存数据、完成网络请求等）。这种机制基于系统的后台任务调度（如 BGTaskScheduler），但通过 SwiftUI 的声明式 API，使得配置和使用变得非常简单。&lt;/p></description></item><item><title>Task 和 .task</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/Task/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/Task/</guid><description>&lt;p>在 &lt;strong>SwiftUI&lt;/strong> 中，&lt;code>Task&lt;/code> 是一个用于启动异步任务的结构，基于 Swift 的 &lt;strong>Concurrency（并发）模型&lt;/strong>，与 &lt;code>async/await&lt;/code> 紧密结合。它允许你在不阻塞主线程的情况下执行异步代码，非常适合处理网络请求、数据加载等需要异步处理的场景。&lt;/p></description></item><item><title>TaskGroup</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskGroup/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskGroup/</guid><description>&lt;h3 id="-swift-并发中的">🚀 &lt;strong>Swift 并发中的 &lt;code>withTaskGroup&lt;/code> 与 &lt;code>TaskGroup&lt;/code> 全面解析&lt;/strong>&lt;a class="anchor" href="#-swift-%e5%b9%b6%e5%8f%91%e4%b8%ad%e7%9a%84">#&lt;/a>&lt;/h3>
&lt;p>Swift 5.5 引入了结构化并发（Structured Concurrency），其中 &lt;strong>&lt;code>withTaskGroup&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>TaskGroup&lt;/code>&lt;/strong> 是实现并发任务管理的核心工具。它们可以让你轻松创建、管理和取消多个异步任务，极大地提升代码的性能与可读性。&lt;/p></description></item></channel></rss>