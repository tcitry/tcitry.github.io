<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Method on LYon's Blog</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/</link><description>Recent content in Method on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://yindongliang.com/docs/Apple/SwiftUI/Method/index.xml" rel="self" type="application/rss+xml"/><item><title>commands</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/commands/</link><pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/commands/</guid><description>&lt;p>在 SwiftUI 中，&lt;code>Commands&lt;/code> 修饰符是专门用于 ​&lt;strong>macOS 应用菜单栏定制&lt;/strong>的核心功能。它允许你创建、修改或替换菜单栏中的命令和菜单项。以下是详细说明：&lt;/p></description></item><item><title>FetchRequest</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/FetchRequest/</link><pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/FetchRequest/</guid><description>&lt;p>SwiftUI 的 &lt;code>@FetchRequest&lt;/code> 属性包装器是与 Core Data 深度集成的关键工具，用于在视图中声明式地获取并监听数据变化。以下是其核心要点及用法介绍：&lt;/p>
&lt;hr>
&lt;h3 id="基本概念">&lt;strong>基本概念&lt;/strong>&lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>用途&lt;/strong>：从 Core Data 中获取数据，并在数据变化时自动更新视图。&lt;/li>
&lt;li>&lt;strong>自动同步&lt;/strong>：当 Core Data 的上下文（&lt;code>NSManagedObjectContext&lt;/code>）发生变动时，&lt;code>@FetchRequest&lt;/code> 会自动刷新关联的视图。&lt;/li>
&lt;li>&lt;strong>声明式语法&lt;/strong>：通过属性包装器配置请求参数（如实体、排序、过滤条件），简化数据获取逻辑。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="核心配置参数">&lt;strong>核心配置参数&lt;/strong>&lt;a class="anchor" href="#%e6%a0%b8%e5%bf%83%e9%85%8d%e7%bd%ae%e5%8f%82%e6%95%b0">#&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>实体（Entity）&lt;/strong>：指定要查询的 Core Data 实体类型（如 &lt;code>Item.self&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>排序描述符（SortDescriptors）&lt;/strong>：定义结果的排序规则（如按日期升序）。&lt;/li>
&lt;li>&lt;strong>谓词（Predicate）&lt;/strong>：设置过滤条件（如只查询未完成的任务）。&lt;/li>
&lt;li>&lt;strong>动画（Animation）&lt;/strong>：数据变化时的视图过渡动画（默认使用 &lt;code>.default&lt;/code>）。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">@&lt;/span>&lt;span style="color:#aa89ea">FetchRequest&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">sortDescriptors&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">SortDescriptor&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>\&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">timestamp&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">order&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">reverse&lt;/span>&lt;span style="color:#abb2bf">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">predicate&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">NSPredicate&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">format&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#98c379">&amp;#34;isCompleted == %@&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">NSNumber&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">value&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#abb2bf">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">animation&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#76a9f9">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">items&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">FetchedResults&lt;/span>&lt;span style="color:#abb2bf">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">Item&lt;/span>&lt;span style="color:#abb2bf">&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="动态调整请求">&lt;strong>动态调整请求&lt;/strong>&lt;a class="anchor" href="#%e5%8a%a8%e6%80%81%e8%b0%83%e6%95%b4%e8%af%b7%e6%b1%82">#&lt;/a>&lt;/h3>
&lt;p>通过初始化时绑定到状态变量，实现动态过滤或排序。例如，根据用户输入实时更新查询条件：&lt;/p></description></item><item><title> 单复数形式</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/%E5%8D%95%E5%A4%8D%E6%95%B0/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/%E5%8D%95%E5%A4%8D%E6%95%B0/</guid><description>&lt;p>在 SwiftUI 中，开发者可以通过 &lt;strong>&lt;code>String.LocalizationValue&lt;/code>&lt;/strong> 和 &lt;strong>Foundation 框架的本地化规则&lt;/strong> 实现智能的单复数形式适配。以下是如何在 SwiftUI 中优雅处理单复数问题的完整方案：&lt;/p>
&lt;hr>
&lt;h3 id="一基础方案使用-localizedstringwithformat">一、基础方案：使用 &lt;code>.localizedStringWithFormat&lt;/code>&lt;a class="anchor" href="#%e4%b8%80%e5%9f%ba%e7%a1%80%e6%96%b9%e6%a1%88%e4%bd%bf%e7%94%a8-localizedstringwithformat">#&lt;/a>&lt;/h3>
&lt;p>利用 &lt;code>String&lt;/code> 的本地化方法，根据数值动态选择单复数形式：&lt;/p></description></item><item><title>tag</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/tag/</link><pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/tag/</guid><description>&lt;h3 id="swiftui-的">&lt;strong>SwiftUI 的 &lt;code>.tag(_:)&lt;/code> 是什么？&lt;/strong>&lt;a class="anchor" href="#swiftui-%e7%9a%84">#&lt;/a>&lt;/h3>
&lt;p>&lt;code>.tag(_:)&lt;/code> 是 SwiftUI 提供的一个修饰符，主要用于&lt;strong>标记视图，使其可用于选择或导航&lt;/strong>。它常用于 &lt;code>Picker&lt;/code>、&lt;code>TabView&lt;/code> 和 &lt;code>NavigationLink&lt;/code> 等控件，与 &lt;code>@State&lt;/code> 或 &lt;code>@Binding&lt;/code> 变量配合使用。&lt;/p></description></item><item><title>ViewModifier</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/ViewModifier/</link><pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/ViewModifier/</guid><description>&lt;p>&lt;code>ViewModifier&lt;/code> 是 SwiftUI 提供的一个协议，允许你创建可复用的视图修改器（Modifiers），以便在多个地方应用相同的视图调整或效果。它的主要作用是对 &lt;code>View&lt;/code> 进行封装，以便代码更加模块化、可读性更高。&lt;/p></description></item><item><title>ViewBuilder</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/ViewBuilder/</link><pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/ViewBuilder/</guid><description>&lt;p>&lt;code>ViewBuilder&lt;/code> 是 SwiftUI 中用于&lt;strong>声明式构建视图层级&lt;/strong>的核心机制，它通过结果构建器（Result Builder）技术，将多个视图组合成一个视图树。以下是 &lt;code>ViewBuilder&lt;/code> 的详细用法和关键特性：&lt;/p></description></item><item><title>help</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/help/</link><pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/help/</guid><description>&lt;p>在 SwiftUI 中，&lt;code>.help&lt;/code> 修饰符被用来为视图提供&lt;strong>辅助信息&lt;/strong>（即工具提示，类似于“说明”），让用户可以更好地理解视图的功能或上下文。这种辅助信息在一些平台（如 macOS 和 iPadOS）中更为常见和有用。&lt;/p></description></item><item><title>searchable</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/searchable/</link><pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/searchable/</guid><description>&lt;p>在 SwiftUI 中，&lt;code>searchable&lt;/code> 修饰符添加了强大的搜索功能，使得用户能够轻松地在数据中搜索。它允许你在视图中添加搜索栏，并对搜索输入进行处理。 &lt;code>searchable&lt;/code> 可以应用于多种视图，如 &lt;code>List&lt;/code>、&lt;code>ScrollView&lt;/code> 等。&lt;/p></description></item><item><title>AppStorage</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/AppStorage/</link><pubDate>Thu, 16 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/AppStorage/</guid><description>&lt;h3 id="什么是">&lt;strong>什么是 &lt;code>@AppStorage&lt;/code>？&lt;/strong>&lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af">#&lt;/a>&lt;/h3>
&lt;p>在 &lt;strong>SwiftUI&lt;/strong> 中，&lt;code>@AppStorage&lt;/code> 是一个属性包装器，用于便捷地访问 &lt;code>UserDefaults&lt;/code> 中存储的数据。它提供了一种现代化和类型安全的方式来读取和存储轻量级的键值对数据，尤其适用于 &lt;strong>持久化跨应用会话的简单设定&lt;/strong>（如用户偏好、配置信息等）。&lt;/p></description></item><item><title>@Environment</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/Environment/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/Environment/</guid><description>&lt;p>在 &lt;strong>SwiftUI&lt;/strong> 中，&lt;code>Environment&lt;/code> 和 &lt;strong>&lt;code>Environment Values&lt;/code>&lt;/strong>（环境值）提供了一种机制，帮助开发者在整个视图层次结构中轻松共享数据。&lt;strong>环境值&lt;/strong>是 SwiftUI 内置的全局设置，允许我们在不同视图层级中访问和动态调整系统属性。&lt;/p></description></item><item><title>allowsHitTesting</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/allowsHitTesting/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/allowsHitTesting/</guid><description>&lt;h3 id="swiftui-中">&lt;strong>SwiftUI 中 &lt;code>allowsHitTesting&lt;/code> 的作用&lt;/strong>&lt;a class="anchor" href="#swiftui-%e4%b8%ad">#&lt;/a>&lt;/h3>
&lt;p>&lt;code>allowsHitTesting&lt;/code> 是一个 SwiftUI 的修饰符，用来控制视图是否可接收用户的触摸等交互事件。它可以用于启用、禁用某个 &lt;strong>视图的用户点击或交互&lt;/strong>，而不会影响视图的展示。&lt;/p></description></item><item><title>id</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/id/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/id/</guid><description>&lt;h3 id="id_">&lt;strong>&lt;code>.id(_:)&lt;/code> 修饰符的使用及作用&lt;/strong>&lt;a class="anchor" href="#id_">#&lt;/a>&lt;/h3>
&lt;p>在 SwiftUI 中，&lt;code>.id(_:)&lt;/code> 修饰符用于为视图分配唯一标识符。SwiftUI 使用这个标识符来区分视图，在视图树（View Hierarchy）发生变化时决定是更新现有视图还是销毁并重新创建视图。&lt;/p></description></item><item><title>KeyboardShortcut</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/KeyboardShortcut/</link><pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/KeyboardShortcut/</guid><description>&lt;p>你提到的 &lt;code>cancelAction: KeyboardShortcut&lt;/code> 是 SwiftUI 中的一个静态属性，它定义了&lt;strong>标准化的键盘快捷键（&lt;/strong>&lt;code>KeyboardShortcut&lt;/code>&lt;strong>）&lt;/strong>，用于&lt;strong>取消当前操作或关闭弹框（prompt）&lt;/strong>。这个属性主要用于 &lt;strong>macOS&lt;/strong> 和支持键盘交互的平台（比如 iPad 上连接键盘，或 macOS Catalyst）。&lt;/p></description></item><item><title>dismiss 使用</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Method/dismiss/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Method/dismiss/</guid><description>&lt;p>&lt;code>dismiss&lt;/code> 通常作为 &lt;code>Environment&lt;/code> 的一部分被讨论，而不是作为单独的函数。你可以在以下位置找到相关信息：&lt;/p>
&lt;ol>
&lt;li>SwiftUI 文档中的 &lt;code>Environment&lt;/code> 部分：&lt;a href="https://developer.apple.com/documentation/swiftui/environment">https://developer.apple.com/documentation/swiftui/environment&lt;/a>&lt;/li>
&lt;li>&lt;code>DismissAction&lt;/code> 的文档：&lt;a href="https://developer.apple.com/documentation/swiftui/dismissaction">https://developer.apple.com/documentation/swiftui/dismissaction&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&lt;code>@Environment(\.dismiss) private var dismiss&lt;/code> 和随后调用 &lt;code>dismiss()&lt;/code> 是 SwiftUI 中用于关闭或退出当前视图的一种机制。让我详细解释一下这个过程：&lt;/p></description></item></channel></rss>