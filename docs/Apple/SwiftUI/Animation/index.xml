<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Animations on LYon's Blog</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/</link><description>Recent content in Animations on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://yindongliang.com/docs/Apple/SwiftUI/Animation/index.xml" rel="self" type="application/rss+xml"/><item><title>contentTransition</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/contentTransition/</link><pubDate>Thu, 20 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/contentTransition/</guid><description>&lt;p>&lt;code>contentTransition&lt;/code> 是 SwiftUI 中用于定义内容切换（即视图内容更新时的过渡效果）的一个修饰符。它允许开发者为视图的内容变化指定动画和过渡效果，使得应用界面更加流畅和吸引人。以下是关于 &lt;code>contentTransition&lt;/code> 的使用场景、方法以及可设置的类型介绍。&lt;/p></description></item><item><title>rotationEffect</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/rotationEffect/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/rotationEffect/</guid><description>&lt;p>在 SwiftUI 中，&lt;code>rotationEffect&lt;/code> 是一个用于对视图进行二维旋转变换的修饰符。它允许你通过指定旋转角度和锚点（旋转中心）来调整视图的方向。以下是它的使用方式和关键点：&lt;/p></description></item><item><title>transition</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/transition/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/transition/</guid><description>&lt;h3 id="什么是">&lt;strong>什么是 &lt;code>transition&lt;/code>？&lt;/strong>&lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af">#&lt;/a>&lt;/h3>
&lt;p>在 &lt;strong>SwiftUI&lt;/strong> 中，&lt;code>transition&lt;/code> 是一个视图修饰符，用于定义视图在进入或退出布局时的动画效果。通过 &lt;code>transition&lt;/code>，你可以为视图的出现（Appear）和消失（Disappear）设置一些平滑过渡。&lt;/p></description></item><item><title>过渡与动画关系</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/</guid><description>&lt;p>在 &lt;strong>SwiftUI&lt;/strong> 中，&lt;strong>过渡（Transition）&lt;/strong> 和 &lt;strong>动画（Animation）&lt;/strong> 是用户界面中常用的两种动效工具。虽然它们都会影响视图的呈现和交互效果，但各自有不同的用途和特性。&lt;/p></description></item><item><title>transaction</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/transaction/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/transaction/</guid><description>&lt;p>在 SwiftUI 中，&lt;strong>Transaction&lt;/strong> 是一个结构体，它封装了关于视图状态更新的元数据，特别是动画相关的信息。换句话说，Transaction 表示一次状态变化提交的上下文，它决定了这次更新如何被动画化以及其他一些过渡相关的行为。&lt;/p></description></item><item><title>Animatable</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/Animatable/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/Animatable/</guid><description>&lt;p>&lt;a href="https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/">Animatable 协议：让 SwiftUI 动画不再“失控”&lt;/a>&lt;/p>
&lt;p>在 SwiftUI 中，&lt;code>Animatable&lt;/code> 协议用于自定义视图或形状的动画插值过程。当系统默认的动画行为无法满足需求时，可以通过实现该协议，精细控制属性的过渡效果。以下是详细的使用场景和实现方法：&lt;/p></description></item><item><title>animation</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/animation/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/animation/</guid><description>&lt;h2 id="animation">Animation&lt;a class="anchor" href="#animation">#&lt;/a>&lt;/h2>
&lt;p>在 &lt;strong>SwiftUI&lt;/strong> 中，动画能够为用户界面带来平滑且自然的动态效果，这不仅能提升用户体验，还能增强应用的交互性。了解动画的体系结构、具体实现方式及核心概念，是将其灵活运用于项目的关键。&lt;/p></description></item><item><title> 动画的节流与防抖</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Animation/%E5%8A%A8%E7%94%BB%E7%9A%84%E8%8A%82%E6%B5%81%E4%BA%8E%E9%98%B2%E6%8A%96/</link><pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Animation/%E5%8A%A8%E7%94%BB%E7%9A%84%E8%8A%82%E6%B5%81%E4%BA%8E%E9%98%B2%E6%8A%96/</guid><description>&lt;p>&lt;strong>“节流”&lt;/strong> 或 &lt;strong>“防抖”&lt;/strong> 技术在动画、拖拽、UI 交互中非常常见，用于防止某些事件（例如 &lt;code>onChanged&lt;/code> 的回调）被高频触发过多，从而优化性能或创建更流畅的用户体验。&lt;/p>
&lt;p>在 SwiftUI 的拖拽和动画中，处理频繁触发的回调（例如在 &lt;code>onChanged&lt;/code> 中的事件）通常可以使用以下技术：&lt;/p></description></item></channel></rss>