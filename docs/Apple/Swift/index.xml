<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LYon's Blog</title><link>https://yindongliang.com/docs/Apple/Swift/</link><description>Recent content on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://yindongliang.com/docs/Apple/Swift/index.xml" rel="self" type="application/rss+xml"/><item><title>语法</title><link>https://yindongliang.com/docs/Apple/Swift/%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E8%AF%AD%E6%B3%95/</guid><description>&lt;h2 id="官方文档">官方文档&lt;a class="anchor" href="#%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language">官方文档：The Swift Programming Language&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://developer.apple.com/documentation/swift">https://developer.apple.com/documentation/swift&lt;/a>&lt;/p>
&lt;h2 id="语言特点">语言特点&lt;a class="anchor" href="#%e8%af%ad%e8%a8%80%e7%89%b9%e7%82%b9">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.swift.org/about/">https://www.swift.org/about/&lt;/a>&lt;/p>
&lt;p>Swift is a general-purpose programming language that’s approachable for newcomers and powerful for experts. It is fast, modern, safe, and a joy to write.&lt;/p>
&lt;h2 id="变量声明">变量声明&lt;a class="anchor" href="#%e5%8f%98%e9%87%8f%e5%a3%b0%e6%98%8e">#&lt;/a>&lt;/h2>
&lt;p>swift 使用 &lt;code>let&lt;/code> 来声明常量，使用 &lt;code>var&lt;/code> 来声明变量。常量只能赋值一次。即：&lt;code>let&lt;/code> 的内存地址不能变，&lt;code>var&lt;/code> 的内存地址可变。&lt;/p></description></item><item><title>特殊标记</title><link>https://yindongliang.com/docs/Apple/Swift/%E7%89%B9%E6%AE%8A%E6%A0%87%E8%AE%B0/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E7%89%B9%E6%AE%8A%E6%A0%87%E8%AE%B0/</guid><description>&lt;p>在 Swift 中，编译器提供的特殊标记（Compiler Identifiers）是一组由编译器生成的元信息变量。这些变量在编译时会被替换为具体的值，通常用于调试、日志记录或生成代码元信息。以下是关于这些特殊标记的整体介绍和体系结构。&lt;/p></description></item><item><title>属性（Properties）</title><link>https://yindongliang.com/docs/Apple/Swift/Properties-%E5%B1%9E%E6%80%A7/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/Properties-%E5%B1%9E%E6%80%A7/</guid><description>&lt;h2 id="计算属性">计算属性&lt;a class="anchor" href="#%e8%ae%a1%e7%ae%97%e5%b1%9e%e6%80%a7">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Computed-Properties">官方文档&lt;/a>&lt;/p>
&lt;p>在 Swift 中，&lt;code>get&lt;/code> 和 &lt;code>set&lt;/code> 是用于定义计算属性的访问器。计算属性是一种特殊的属性，它没有直接存储值，而是通过一个方法来计算其值。&lt;/p>
&lt;p>&lt;strong>&lt;code>get&lt;/code> 访问器：&lt;/strong>&lt;/p></description></item><item><title>Struct 中的 self 使用</title><link>https://yindongliang.com/docs/Apple/Swift/struct-self/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/struct-self/</guid><description>&lt;p>在 SwiftUI 中，&lt;code>self&lt;/code> 的使用与 Swift 语言本身的规则一致。通常情况下，Swift 允许你在不引起歧义的情况下省略 &lt;code>self&lt;/code>。然而，在某些特定情况下，使用 &lt;code>self&lt;/code> 是必要的或推荐的。以下是详细说明：&lt;/p></description></item><item><title>deinit</title><link>https://yindongliang.com/docs/Apple/Swift/deinit/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/deinit/</guid><description>&lt;h3 id="deinit">&lt;strong>&lt;code>deinit&lt;/code> 的介绍&lt;/strong>&lt;a class="anchor" href="#deinit">#&lt;/a>&lt;/h3>
&lt;p>在 Swift 中，&lt;strong>&lt;code>deinit&lt;/code>&lt;/strong> 是一个特殊的析构函数（或析构器），&lt;strong>在类的实例被销毁时自动调用&lt;/strong>。&lt;code>deinit&lt;/code> 的主要作用是&lt;strong>执行清理工作&lt;/strong>，以释放资源、移除监听器或关闭任务。&lt;/p></description></item><item><title> 闭包（closure）（闭包捕获）</title><link>https://yindongliang.com/docs/Apple/Swift/closure-%E9%97%AD%E5%8C%85/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/closure-%E9%97%AD%E5%8C%85/</guid><description>&lt;h2 id="在捕获列表中使用弱引用">在捕获列表中使用弱引用&lt;a class="anchor" href="#%e5%9c%a8%e6%8d%95%e8%8e%b7%e5%88%97%e8%a1%a8%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%bc%b1%e5%bc%95%e7%94%a8">#&lt;/a>&lt;/h2>
&lt;p>&lt;code>[weak self]&lt;/code> 是 Swift 中闭包（closure）捕获列表的一部分，用于避免强引用循环（retain cycles）。在使用闭包时，特别是在异步操作或定时器中，闭包可能会捕获其上下文中的对象（如 &lt;code>self&lt;/code>），这可能导致内存泄漏。以下是对 &lt;code>[weak self]&lt;/code> 的详细解释：&lt;/p></description></item><item><title>类（Class）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-class/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-class/</guid><description>&lt;p>Swift 是一种面向对象（OOP，&lt;strong>Object-Oriented Programming&lt;/strong>）语言，支持面向对象设计中的主要特性，比如 &lt;strong>类&lt;/strong>、&lt;strong>对象&lt;/strong>、&lt;strong>继承&lt;/strong>、&lt;strong>多态&lt;/strong> 和 &lt;strong>封装&lt;/strong>。同时，Swift 提供了许多其他现代化的功能，使面向对象编程更加强大和灵活。&lt;/p></description></item><item><title>泛型（Generics）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-generics/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-generics/</guid><description>&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/generics/">泛型&lt;/a>（Generics）是 Swift 语言中的强大特性，它允许你编写灵活且可重用的代码。通过使用泛型，你可以让函数、方法、类、结构体和枚举适用于任何类型，而不需要重复编写相同的代码。泛型有助于编写更加抽象和通用的代码，从而提高代码的复用性和类型安全性。&lt;/p></description></item><item><title>枚举（Enumerations）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-enum/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-enum/</guid><description>&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations/">枚举&lt;/a>（Enumeration）是 Swift 中的一种强大的数据类型，它允许你定义一组相关的值，并且每个值都被认为是同一类型的一部分。枚举可以帮助你组织代码，更好地表示和处理一组相关的值。&lt;/p></description></item><item><title>函数（Functions）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-functions/</link><pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-functions/</guid><description>&lt;p>在 Swift 中，函数是一等公民。这意味着函数不仅可以用来执行一系列指令，还可以作为参数传递给其他函数，作为返回值从其他函数中返回，甚至可以嵌套和捕获周围作用域中的变量。下面是 Swift 中函数的详细介绍和使用示例。&lt;/p></description></item><item><title>结构体（Struct）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-struct/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-struct/</guid><description>&lt;h2 id="概念">概念&lt;a class="anchor" href="#%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;p>在 Swift 中，结构体 &lt;code>struct&lt;/code> 是一种非常有用的数据类型。它允许你将一组相关的值组合在一起，并定义它们的行为。结构体在 Swift 中是值类型，与类 &lt;code>class&lt;/code> 的引用类型有显著的区别。&lt;/p></description></item><item><title>协议（Protocol）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-protocol/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-protocol/</guid><description>&lt;p>在 Swift 中，协议（Protocol）是一种为方法、属性和其他需求定义蓝图的方式。协议本身并不实现这些需求，它只是向遵循协议的类型（类、结构体、枚举等）规定这些需求应该存在并实现。&lt;/p></description></item><item><title>@ 符号之属性</title><link>https://yindongliang.com/docs/Apple/Swift/swift-at-sign-attributes/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-at-sign-attributes/</guid><description>&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes">Attributes&lt;/a>&lt;/p>
&lt;blockquote class='book-hint '>
&lt;p>There are two kinds of attributes in Swift — those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type.&lt;/p>&lt;/blockquote>&lt;p>简单来说，在 Swift 中，只有两种类型的属性：一种用于声明，另一种用于类型。属性提供关于声明或类型的附加信息。&lt;/p></description></item><item><title>$ 美元符号</title><link>https://yindongliang.com/docs/Apple/Swift/swift-dollar-sign/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-dollar-sign/</guid><description>&lt;p>在 Swift 中，&lt;code>$&lt;/code> 符号有几个不同的用途，主要包括适配 SwiftUI 和 Combine 框架中的绑定和发布者，以及 Swift 闭包的简写，它们在不同场景中有不同的含义。&lt;/p>
&lt;h2 id="1-swiftui-中的绑定">1. SwiftUI 中的绑定&lt;a class="anchor" href="#1-swiftui-%e4%b8%ad%e7%9a%84%e7%bb%91%e5%ae%9a">#&lt;/a>&lt;/h2>
&lt;p>在 SwiftUI 中，&lt;code>$&lt;/code> 符号通常用于绑定到某个 &lt;code>@State&lt;/code> 或 &lt;code>@ObservedObject&lt;/code> 属性。在 SwiftUI 中，绑定（&lt;code>Binding&lt;/code>）允许你在视图和数据源之间建立双向数据绑定，从而保持数据的一致性。&lt;/p></description></item><item><title>key-path 表达式</title><link>https://yindongliang.com/docs/Apple/Swift/swift-key-path-expression/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-key-path-expression/</guid><description>&lt;p>键路径（Key Path）是 Swift 语言中的一种强大特性，它提供了一种类型安全的方式来引用类型（如结构体或类）中的属性。键路径使得我们能够以一种间接的、动态的、且类型安全的方式访问和修改属性。&lt;/p></description></item><item><title>可选类型</title><link>https://yindongliang.com/docs/Apple/Swift/swift-optional-type/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-optional-type/</guid><description>&lt;p>Swift 的可选类型（Optional）是一种非常强大的特性，用于表示变量可能有值，也可能为 &lt;code>nil&lt;/code>，即没有值。可选类型确保在处理未初始化或缺失值时代码更加安全和清晰，减少了运行时错误。&lt;/p></description></item></channel></rss>