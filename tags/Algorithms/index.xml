<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on LYon's Blog</title><link>https://yindongliang.com/tags/Algorithms/</link><description>Recent content in Algorithms on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 23 Oct 2025 11:24:39 +0800</lastBuildDate><atom:link href="https://yindongliang.com/tags/Algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>集体智慧编程</title><link>https://yindongliang.com/docs/Algorithms/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B/</guid><description>&lt;h2 id="第一章提供推荐">第一章：提供推荐&lt;a class="anchor" href="#%e7%ac%ac%e4%b8%80%e7%ab%a0%e6%8f%90%e4%be%9b%e6%8e%a8%e8%8d%90">#&lt;/a>&lt;/h2>
&lt;h3 id="欧几里得距离">欧几里得距离&lt;a class="anchor" href="#%e6%ac%a7%e5%87%a0%e9%87%8c%e5%be%97%e8%b7%9d%e7%a6%bb">#&lt;/a>&lt;/h3>
&lt;p>欧氏距离是平方和的开方，欧氏距离越小，则两个向量的相似度越大（有时也说距离越近）。&lt;/p>
&lt;p>$$d = \sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}$$&lt;/p>
&lt;p>对于两个 n 维向量 $\mathbf{A} = (a_1, a_2, &amp;hellip;, a_n)$ 和 $\mathbf{B} = (b_1, b_2, &amp;hellip;, b_n)$，它们之间的欧氏距离 $d$ 可以表示为：&lt;/p></description></item><item><title>链表（Linked list）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</link><pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</guid><description>&lt;h2 id="基本概念">基本概念&lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;h3 id="单向链表">单向链表&lt;a class="anchor" href="#%e5%8d%95%e5%90%91%e9%93%be%e8%a1%a8">#&lt;/a>&lt;/h3>
&lt;h4 id="javascript">JavaScript&lt;a class="anchor" href="#javascript">#&lt;/a>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">function&lt;/span> &lt;span style="color:#aa89ea">ListNode&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">val&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">next&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">val&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">val&lt;/span> &lt;span style="color:#54b1c7">===&lt;/span> &lt;span style="color:#e5c07b">undefined&lt;/span> &lt;span style="color:#54b1c7">?&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#54b1c7">:&lt;/span> &lt;span style="color:#aa89ea">val&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">next&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">next&lt;/span> &lt;span style="color:#54b1c7">===&lt;/span> &lt;span style="color:#e5c07b">undefined&lt;/span> &lt;span style="color:#54b1c7">?&lt;/span> &lt;span style="color:#e5c07b">null&lt;/span> &lt;span style="color:#54b1c7">:&lt;/span> &lt;span style="color:#aa89ea">next&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="golang">Golang&lt;a class="anchor" href="#golang">#&lt;/a>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">type&lt;/span> &lt;span style="color:#aa89ea">ListNode&lt;/span> &lt;span style="color:#76a9f9">struct&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#aa89ea">Val&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#aa89ea">Next&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>&lt;span style="color:#aa89ea">ListNode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="双向链表">双向链表&lt;a class="anchor" href="#%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8">#&lt;/a>&lt;/h3>
&lt;p>双向链表在单向链表节点的基础上增加了指向前一个节点的指针，这样一来，既可以从头节点开始从前往后遍历到尾节点，也可以从尾节点开始从后往前遍历到头节点。&lt;/p></description></item><item><title>数组（Array）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/</guid><description>&lt;h2 id="一维数组">一维数组&lt;a class="anchor" href="#%e4%b8%80%e7%bb%b4%e6%95%b0%e7%bb%84">#&lt;/a>&lt;/h2>
&lt;p>数组常被用来当做栈、堆和队列的容器，除此之外，大多是单纯只涉及数组的题目。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>支持下标&lt;/li>
&lt;li>支持切片&lt;/li>
&lt;li>有固定长度或可变长度&lt;/li>
&lt;/ol>
&lt;h2 id="应用场景">应用场景&lt;a class="anchor" href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af">#&lt;/a>&lt;/h2>
&lt;p>数组结构很简单，但是出的题涉及的算法类型比较多，比如排序、二分法、双指针、滑动窗口，还会有一些是动态规划。&lt;/p></description></item><item><title>字符串（String）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;p>字符串本身的数据结构并不复杂，同数组非常类似，没啥特别需要介绍的，就是题一般都不简单。&lt;/p>
&lt;p>做题需要考虑：&lt;/p>
&lt;ul>
&lt;li>有的字符串一定是 26 个字母，有的可能会包含空格。&lt;/li>
&lt;/ul>
&lt;h2 id="注意事项">注意事项&lt;a class="anchor" href="#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9">#&lt;/a>&lt;/h2>
&lt;h3 id="golang">Golang&lt;a class="anchor" href="#golang">#&lt;/a>&lt;/h3>
&lt;p>注意：Go 的 for 循环得到的是 rune 类型的字符，需要进行转换。&lt;/p></description></item><item><title>周志华西瓜书</title><link>https://yindongliang.com/docs/Algorithms/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%91%A8%E5%BF%97%E5%8D%8E%E8%A5%BF%E7%93%9C%E4%B9%A6/</link><pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%91%A8%E5%BF%97%E5%8D%8E%E8%A5%BF%E7%93%9C%E4%B9%A6/</guid><description>&lt;p>&lt;a href="https://www.bilibili.com/video/BV1gG411f7zX/?share_source=copy_web&amp;amp;vd_source=fe111319444213c0651c9b0de9740974">周志华老师亲讲-西瓜书《机器学习》&lt;/a>&lt;/p>
&lt;p>手推笔记&lt;br>
&lt;a href="https://github.com/Sophia-11/Machine-Learning-Notes">https://github.com/Sophia-11/Machine-Learning-Notes&lt;/a>&lt;/p>
&lt;h2 id="基础概念">基础概念&lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;p>&lt;strong>真相（Ground Truth）&lt;/strong>：在机器学习和数据科学中，&amp;ldquo;真相&amp;quot;指的是实际情况或数据的真实状态。这通常是指标准答案或一个已知的事实，用于训练和验证机器学习模型。例如，在图像识别任务中，标记图像中对象的正确标签就是&amp;quot;真相&amp;rdquo;。&lt;/p></description></item><item><title>队列（Queue）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/</guid><description>&lt;h2 id="普通队列">普通队列&lt;a class="anchor" href="#%e6%99%ae%e9%80%9a%e9%98%9f%e5%88%97">#&lt;/a>&lt;/h2>
&lt;p>队列的特点就是先进先出，后进后出。可以使用数组、链表实现队列。&lt;/p>
&lt;h3 id="队列的操作">队列的操作&lt;a class="anchor" href="#%e9%98%9f%e5%88%97%e7%9a%84%e6%93%8d%e4%bd%9c">#&lt;/a>&lt;/h3>
&lt;p>&lt;strong>插入元素&lt;/strong>（add）一般指在队列首部插入元素。&lt;/p>
&lt;p>&lt;strong>删除元素&lt;/strong>（remove）指删除队列末尾的元素。&lt;/p></description></item><item><title>栈（Stack）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/</guid><description>&lt;h2 id="基础知识">基础知识&lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86">#&lt;/a>&lt;/h2>
&lt;p>栈是一种常用的数据结构，它最大的特点是“后入先出”，即后进入栈中的元素最先出来，为了确保“后入先出”（LIFO）的顺序，栈的插入（push）和删除（pop）操作都发生在栈顶。&lt;/p></description></item><item><title>哈希表（Hash Table）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/</link><pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid><description>&lt;h2 id="基础概念">基础概念&lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;p>哈希表是一种常见的数据结构，也叫散列表。哈希表最大的优点是高效，在哈希表中插入、删除或查找一个元素都只需要 O(1) 的时间。&lt;/p>
&lt;p>因此，哈希表经常被用来优化时间效率。除了专门考散列表的题，也经常作为辅助计算的数据结构，很多时候都可以考虑是否需要借助散列表解决。比如用来记录字符串中字母出现的次数、字符串中字符出现的位置等信息。&lt;/p></description></item><item><title>二叉树（Binary Tree）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>&lt;h2 id="基本概念">基本概念&lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;h3 id="父节点子节点叶子节点">父节点，子节点，叶子节点&lt;a class="anchor" href="#%e7%88%b6%e8%8a%82%e7%82%b9%e5%ad%90%e8%8a%82%e7%82%b9%e5%8f%b6%e5%ad%90%e8%8a%82%e7%82%b9">#&lt;/a>&lt;/h3>
&lt;p>叶子节点： 一棵树当中没有子结点的结点称为叶子结点。&lt;/p>
&lt;h3 id="高度和深度">高度和深度&lt;a class="anchor" href="#%e9%ab%98%e5%ba%a6%e5%92%8c%e6%b7%b1%e5%ba%a6">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>树的高度：节点到叶子节点的最大值就是其高度。&lt;/li>
&lt;li>树的深度：高度和深度是相反的，高度是从下往上数，深度是从上往下。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：&lt;/strong> 一般默认是把根节点的深度设为 1，把子节点的高度设为 1，比如 &lt;a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度&lt;/a>。在面试的时候最好要确认一下。&lt;/p></description></item><item><title>堆（Heap）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/</guid><description>&lt;h2 id="介绍">介绍&lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>&lt;/h2>
&lt;p>堆（heap）分为最大堆（大根堆/大顶堆）和最小堆（小根堆/小顶堆），通常用&lt;strong>完全二叉树&lt;/strong>实现，完全二叉树又可以用&lt;a href="https://yindongliang.com/docs/Algorithms/%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84/%e6%95%b0%e7%bb%84">数组&lt;/a>实现，故堆通常以数组形式进行存储，而非二叉树的链式存储。常见的堆有&lt;strong>二叉堆&lt;/strong>、&lt;strong>裴波那契堆&lt;/strong>等，通常也用堆来实现优先队列（Priority Queue）。&lt;/p>
&lt;h2 id="堆的特点">堆的特点&lt;a class="anchor" href="#%e5%a0%86%e7%9a%84%e7%89%b9%e7%82%b9">#&lt;/a>&lt;/h2>
&lt;p>堆属性非常有用，因为堆常常被当做优先队列使用，因为可以快速地访问到“最重要”的元素。&lt;/p></description></item><item><title>前缀树（Trie）</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/</guid><description>&lt;p>Trie 又称前缀树、字典树、单词查找树，是一种二叉树衍生出来的多叉树，通常用来保存字符串，它的节点和字符串的字符对应，而路径和字符串对应，主要应用场景是处理字符串前缀相关的操作。&lt;/p></description></item><item><title>红黑树</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</guid><description>&lt;p>红黑树也是一种&lt;strong>自平衡二叉搜索树&lt;/strong>，但不同的是，红黑树在每一个结点上增加了一个存储位来表示结点的颜色，可以是 &lt;code>Red&lt;/code> 或 &lt;code>Black&lt;/code>，通过对任何一条从根到叶子的简单路径上各个结点的颜色进行约束，红黑树确保没有一条路径会比其他路径长出 2 倍，因而是近似于平衡的。红黑树的应用非常广，比如 epoll，研究相关底层原理时最好提前了解一下。&lt;/p></description></item><item><title>BPE 子词分词算法</title><link>https://yindongliang.com/docs/LLM/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/BPE-%E5%AD%90%E8%AF%8D%E5%88%86%E8%AF%8D%E7%AE%97%E6%B3%95/</link><pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/LLM/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/BPE-%E5%AD%90%E8%AF%8D%E5%88%86%E8%AF%8D%E7%AE%97%E6%B3%95/</guid><description>&lt;p>我们来详细介绍一下 &lt;a href="https://en.wikipedia.org/wiki/Byte-pair_encoding">&lt;strong>Byte-pair Encoding（BPE）&lt;/strong>&lt;/a>，这是一种在自然语言处理（NLP）领域非常流行且重要的子词分词算法。&lt;/p>
&lt;h3 id="1-核心思想解决什么问题的">1. 核心思想：解决什么问题的？&lt;a class="anchor" href="#1-%e6%a0%b8%e5%bf%83%e6%80%9d%e6%83%b3%e8%a7%a3%e5%86%b3%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98%e7%9a%84">#&lt;/a>&lt;/h3>
&lt;p>在 NLP 任务中，我们需要将文本转换成模型能够理解的数字，即“分词”。传统方法主要有两种：&lt;/p></description></item><item><title>B 树</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/B-tree/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/B-tree/</guid><description>&lt;p>B 树是为磁盘或其他直接存取的辅助存储设备而设计的一种&lt;strong>平衡搜索树&lt;/strong>。B 树类似于红黑树，但它们在降低磁盘 I/O 操作数方面要更好一点，比如很多数据库都使用 B 树或 B 树的变种来存储信息。&lt;/p></description></item><item><title>Embedding</title><link>https://yindongliang.com/docs/LLM/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Embedding/</link><pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/LLM/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Embedding/</guid><description>&lt;p>好的，我们来深入探讨 &lt;strong>Embedding&lt;/strong>，这是现代 AI 尤其是 NLP 领域的核心基石。&lt;/p>
&lt;h3 id="第一部分embedding-详解">第一部分：Embedding 详解&lt;a class="anchor" href="#%e7%ac%ac%e4%b8%80%e9%83%a8%e5%88%86embedding-%e8%af%a6%e8%a7%a3">#&lt;/a>&lt;/h3>
&lt;h4 id="1-什么是-embedding">1. 什么是 Embedding？&lt;a class="anchor" href="#1-%e4%bb%80%e4%b9%88%e6%98%af-embedding">#&lt;/a>&lt;/h4>
&lt;p>&lt;strong>Embedding（嵌入）&lt;/strong> 是一种将高维、离散、稀疏的符号（如单词、产品、用户 ID）映射到低维、连续、稠密的向量空间中的技术。&lt;/p></description></item><item><title>Word2Vec</title><link>https://yindongliang.com/docs/LLM/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Word2Vec/</link><pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/LLM/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Word2Vec/</guid><description>&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/114538417">https://zhuanlan.zhihu.com/p/114538417&lt;/a>&lt;/p>
&lt;p>好的，我们来深入、详细地介绍 &lt;strong>Word2Vec&lt;/strong>。它是自然语言处理领域的一个里程碑式的模型，几乎以一己之力推动了词嵌入技术的普及，为后来的深度学习 NLP 模型奠定了基础。&lt;/p></description></item><item><title>概率统计</title><link>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/</link><pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/</guid><description>&lt;h2 id="参考资料">参考资料&lt;a class="anchor" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">#&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://book.douban.com/subject/26593822/">程序员的数学 2：概率统计&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://book.douban.com/subject/30250554/">从掷骰子到阿尔法狗：趣谈概率&lt;/a>&lt;/li>
&lt;li>ChatGPT 4.0&lt;/li>
&lt;/ul>
&lt;h2 id="基础概念">基础概念&lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;h3 id="符号大全">符号大全&lt;a class="anchor" href="#%e7%ac%a6%e5%8f%b7%e5%a4%a7%e5%85%a8">#&lt;/a>&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>符号&lt;/th>
 &lt;th>含义&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Ω&lt;/td>
 &lt;td>全集&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>⏀&lt;/td>
 &lt;td>空集&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="平均数">平均数&lt;a class="anchor" href="#%e5%b9%b3%e5%9d%87%e6%95%b0">#&lt;/a>&lt;/h3>
&lt;p>平均数（Mean），也常被称为算术平均值，是最常用的集中趋势的度量。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>样本平均数&lt;/strong>，当我们计算一个样本的平均数时，公式为：&lt;/li>
&lt;/ul>
&lt;p>$$
\bar{x} = \frac{\sum_{i=1}^{n} x_i}{n}
$$&lt;/p></description></item><item><title>OI Wiki</title><link>https://yindongliang.com/links/202510/oi-wiki/</link><pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/links/202510/oi-wiki/</guid><description>&lt;p>一个为编程竞赛准备的网站，主要涵盖算法与数学。&lt;/p></description></item><item><title>Hello 算法</title><link>https://yindongliang.com/links/202510/Hello-%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 11 Oct 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/links/202510/Hello-%E7%AE%97%E6%B3%95/</guid><description>&lt;p>动画图解、一键运行的数据结构与算法教程。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/krahets/hello-algo">https://github.com/krahets/hello-algo&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>JWT 介绍和场景示例</title><link>https://yindongliang.com/posts/jwt-api-auth/</link><pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/jwt-api-auth/</guid><description>&lt;h3 id="一jwt-是什么">一、JWT 是什么？&lt;a class="anchor" href="#%e4%b8%80jwt-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://www.jwt.io/">&lt;strong>JWT&lt;/strong>&lt;/a> 的英文全称是 JSON Web Token。它是一种开放的、行业标准的方法，用于在双方之间安全地传输信息作为 JSON 对象。&lt;/p>
&lt;p>最关键的特点是：&lt;strong>这些信息是经过数字签名的，因此可以被验证和信任&lt;/strong>。&lt;/p></description></item><item><title>打家劫舍</title><link>https://yindongliang.com/docs/Algorithms/%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link><pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid><description>&lt;p>打家劫舍基本都可以用&lt;a href="https://yindongliang.com/docs/Algorithms/%e5%b8%b8%e7%94%a8%e7%ae%97%e6%b3%95/%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92">动态规划&lt;/a>来解决。&lt;/p>
&lt;h2 id="房屋偷盗">房屋偷盗&lt;a class="anchor" href="#%e6%88%bf%e5%b1%8b%e5%81%b7%e7%9b%97">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://leetcode.cn/problems/Gu0c2T/">剑指 Offer II 089. 房屋偷盗&lt;/a>&lt;/p>
&lt;h2 id="环形房屋偷盗">环形房屋偷盗&lt;a class="anchor" href="#%e7%8e%af%e5%bd%a2%e6%88%bf%e5%b1%8b%e5%81%b7%e7%9b%97">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://leetcode.cn/problems/PzWKhm/">剑指 Offer II 090. 环形房屋偷盗&lt;/a>&lt;/p>
&lt;p>维护一个 helper，设定 number 的起始位置，自底向上计算两次，取最大值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#aa89ea">rob&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#76a9f9">function&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">length&lt;/span> &lt;span style="color:#54b1c7">===&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">length&lt;/span> &lt;span style="color:#54b1c7">===&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#aa89ea">result1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">helper&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">length&lt;/span> &lt;span style="color:#54b1c7">-&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#aa89ea">result2&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">helper&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">length&lt;/span> &lt;span style="color:#54b1c7">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#e5c07b">Math&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">max&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">result1&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">result2&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#aa89ea">helper&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#76a9f9">function&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">start&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">end&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#aa89ea">left&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">start&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#aa89ea">right&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">start&lt;/span> &lt;span style="color:#54b1c7">&amp;lt;&lt;/span> &lt;span style="color:#aa89ea">end&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">right&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#e5c07b">Math&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">max&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">start&lt;/span>&lt;span style="color:#abb2bf">],&lt;/span> &lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">start&lt;/span>&lt;span style="color:#54b1c7">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">start&lt;/span>&lt;span style="color:#54b1c7">+&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#54b1c7">&amp;lt;=&lt;/span> &lt;span style="color:#aa89ea">end&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#54b1c7">++&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#aa89ea">temp&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">left&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">left&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">right&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#e5c07b">Math&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">max&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">temp&lt;/span> &lt;span style="color:#54b1c7">+&lt;/span> &lt;span style="color:#aa89ea">nums&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">],&lt;/span> &lt;span style="color:#aa89ea">right&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#e5c07b">Math&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">max&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">left&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">right&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="打家劫舍-iii">打家劫舍 III&lt;a class="anchor" href="#%e6%89%93%e5%ae%b6%e5%8a%ab%e8%88%8d-iii">#&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://cdn.yindongliang.com/2022/rob1-tree.jpg" alt="" />&lt;/p></description></item><item><title>递归</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/recursion/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/recursion/</guid><description>&lt;h2 id="建立思维">建立思维&lt;a class="anchor" href="#%e5%bb%ba%e7%ab%8b%e6%80%9d%e7%bb%b4">#&lt;/a>&lt;/h2>
&lt;p>理解递归的关键首先还是弄清楚二叉树的先序遍历、中序遍历和后序遍历的递归实现。任何递归可以说都处在这个模型中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">void&lt;/span> &lt;span style="color:#aa89ea">traverse&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">TreeNode&lt;/span> &lt;span style="color:#aa89ea">root&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">root&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#e5c07b">null&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 前序位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#aa89ea">traverse&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">root&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">left&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 中序位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#aa89ea">traverse&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">root&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">right&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 后序位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果面试官明确要求不使用递归，那一般就是使用后进先出的栈来代替递归实现，可以参考 &lt;a href="https://yindongliang.com/docs/Algorithms/%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84/%e4%ba%8c%e5%8f%89%e6%a0%91">二叉树专题&lt;/a> 中遍历二叉树的非递归实现。&lt;/p></description></item><item><title>贪心算法</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid><description>&lt;p>贪心算法是一种在每一步选择中都采取当前状态下最优（即最有利）的选择，从而希望导致结果是全局最优的算法策略。&lt;/p>
&lt;p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的&lt;strong>贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。&lt;/strong>&lt;/p></description></item><item><title>滑动窗口</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid><description>&lt;p>滑动窗口也是一种双指针算法，但是滑动窗口特别强调窗口向一个方向滑动，看起来简单，但是却属于最难的一种双指针技巧，力扣上的题一般都是中等或困难难度。首要问题是识别什么样的问题需要滑动窗口解决，最常见的题型：子串问题。&lt;/p></description></item><item><title>动态规划</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>&lt;h2 id="介绍">介绍&lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>&lt;/h2>
&lt;p>动态规划（Dynamic Programming，简称DP）常常适用于有重叠子问题和最优子结构性质的问题，并且记录所有子问题的结果，因此动态规划方法所耗时间往往远少于朴素解法。&lt;/p></description></item><item><title>双指针</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/</guid><description>&lt;p>双指针有时也叫滑动窗口，如果一定要和滑动窗口区别，那就是滑动窗口的窗口一般是向一个方向滑动，而双指针一般强调左右两个指针。除此之外，可能还会单独强调快慢指针，快慢指针也是一种双指针，但是两个指针的运动速度是不一样的，一快一慢。&lt;/p></description></item><item><title>二分查找</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link><pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid><description>&lt;p>二分查找利用&lt;strong>已经排好序&lt;/strong>的数组，每次查找可以将查找范围减半，查找范围内只剩一个数据时查找结束。&lt;/p>
&lt;h2 id="代码模板">代码模板&lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e6%a8%a1%e6%9d%bf">#&lt;/a>&lt;/h2>
&lt;p>简单题的模板几乎都是统一的，根据题目的条件再灵活调整就可以了，比如 &lt;a href="https://leetcode.cn/problems/binary-search/">704. 二分查找&lt;/a>。&lt;/p></description></item><item><title>排序</title><link>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/sorting/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Algorithms/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/sorting/</guid><description>&lt;p>排序是非常基础、重要的算法，它将若干数据依照特定的顺序进行排列。如果排序的对象是数值，那么按数值递增或递减的顺序进行排序；如果排序的对象是字符串，那么按照字典顺序进行排序。由于数据排序之后能够利用二分查找算法提高查找的效率，因此很多数据都是排序之后再存储的。&lt;/p></description></item><item><title>通用唯一识别码：UUID</title><link>https://yindongliang.com/posts/intro-uuid/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/intro-uuid/</guid><description>&lt;p>UUID（Universally Unique Identifier，通用唯一识别码）的格式基本上是统一的，遵循一定的标准。最常见的 UUID 表示形式是由 3 2个十六进制数字组成，分为五组，这些组通过连字符（-）分隔，形式如下：&lt;/p></description></item><item><title>HTTPS 的密码学基础</title><link>https://yindongliang.com/posts/https-algorithems/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/https-algorithems/</guid><description>&lt;p>本来打算直接总结下 HTTPS，但是发现要写的很多内容其实都依靠密码学的基础概念，其实我在阅读别的资料的时候发现基本也是这样，不然说的时候上下文都串不起来，甚至可以说研究 HTTPS 约等于在研究加密算法。所以还是专门分一篇来说一下加密，这样后面说 SSL/TLS 的时候就可以拉通底层概念了。&lt;/p></description></item><item><title>交替打印 1-100 之间的奇数和偶数</title><link>https://yindongliang.com/posts/goroutine-print-0-to-100/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/goroutine-print-0-to-100/</guid><description>&lt;p>题目：两个 goroutine 交替打印1-100之间的奇数和偶数。&lt;/p>
&lt;h3 id="方法一">方法一&lt;a class="anchor" href="#%e6%96%b9%e6%b3%95%e4%b8%80">#&lt;/a>&lt;/h3>
&lt;p>利用非缓冲 channel 的阻塞。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">package&lt;/span> &lt;span style="color:#aa89ea">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">import&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#aa89ea">ch&lt;/span> &lt;span style="color:#54b1c7">:=&lt;/span> &lt;span style="color:#e5c07b">make&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">chan&lt;/span> &lt;span style="color:#76a9f9">struct&lt;/span>&lt;span style="color:#abb2bf">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#aa89ea">wg&lt;/span> &lt;span style="color:#aa89ea">sync&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">WaitGroup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#aa89ea">wg&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#00b1f7">Add&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#76a9f9">go&lt;/span> &lt;span style="color:#76a9f9">func&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#76a9f9">defer&lt;/span> &lt;span style="color:#aa89ea">wg&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#00b1f7">Done&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#54b1c7">:=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#abb2bf">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">101&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#54b1c7">++&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#aa89ea">ch&lt;/span> &lt;span style="color:#54b1c7">&amp;lt;-&lt;/span> &lt;span style="color:#76a9f9">struct&lt;/span>&lt;span style="color:#abb2bf">{}{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">//奇数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#54b1c7">%&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#aa89ea">fmt&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#00b1f7">Println&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;线程1打印:&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#abb2bf">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#76a9f9">go&lt;/span> &lt;span style="color:#76a9f9">func&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#76a9f9">defer&lt;/span> &lt;span style="color:#aa89ea">wg&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#00b1f7">Done&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#54b1c7">:=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#abb2bf">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">101&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#54b1c7">++&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#54b1c7">&amp;lt;-&lt;/span> &lt;span style="color:#aa89ea">ch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">//偶数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#54b1c7">%&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#aa89ea">fmt&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#00b1f7">Println&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;线程2打印:&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#abb2bf">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#aa89ea">wg&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#00b1f7">Wait&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="方法二">方法二&lt;a class="anchor" href="#%e6%96%b9%e6%b3%95%e4%ba%8c">#&lt;/a>&lt;/h3>
&lt;p>和方法一类似，但省去了 if 判断。&lt;/p></description></item><item><title>“结点”还是“节点”？</title><link>https://yindongliang.com/posts/node-or-node/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/node-or-node/</guid><description>&lt;h2 id="结点-还是-节点-">“结点” 还是 “节点” ？&lt;a class="anchor" href="#%e7%bb%93%e7%82%b9-%e8%bf%98%e6%98%af-%e8%8a%82%e7%82%b9-">#&lt;/a>&lt;/h2>
&lt;p>刷题时，总会遇到“节点”和“结点”的词汇混用，非常困惑，查了一下，一般认为：&lt;/p>
&lt;ol>
&lt;li>节点是一个实体，它具有处理的能力，比如网络上的一台计算机。&lt;/li>
&lt;li>结点是一个交叉点、一个标记，算法中的点一般都称为结点，数据集合中的每一个数据元素都用中间标有元素值的方框来表示，我们称它为结点。&lt;/li>
&lt;/ol>
&lt;p>所以我们在看《算法导论》的时候，大部分是结点。在讨论服务架构的时候，一般就是节点了，英文里好像都是“node”。另外说时间的时候，一般我们还是说时间“节点”。&lt;/p></description></item><item><title>实现限流的几种方案</title><link>https://yindongliang.com/posts/go-rate-limit/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/go-rate-limit/</guid><description>&lt;p>限流是服务在高并发的情况下，通过限制处理请求的速率，以达到保证服务不过载的目的，实现高可用和稳定性的目标。限流的方案一般有计数法、滑动窗口、漏桶、令牌桶几种，其中各有各的特点，通常需要根据场景采用不同的方案。&lt;/p></description></item><item><title>AES 对称加密学习笔记</title><link>https://yindongliang.com/posts/aes-notes/</link><pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/aes-notes/</guid><description>&lt;p>工作中的需求，需要一个基于 Django 的数据脱敏解决方案，我们的目标是要用 AES 对称加密算法，接入不能影响现有业务逻辑，数据迁移方便，失败可以回滚，最好可以开源。经过调研与开发，我最终产出了一个开源项目：&lt;a href="https://github.com/luojilab/django-mirage-field">luojilab/django-mirage-field&lt;/a>，目前已经有 50+ star。本篇即为学习对称加密算法的笔记。&lt;/p></description></item></channel></rss>