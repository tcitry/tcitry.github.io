<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift on LYon's Blog</title><link>https://yindongliang.com/tags/Swift/</link><description>Recent content in Swift on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 22 Oct 2025 10:03:30 +0800</lastBuildDate><atom:link href="https://yindongliang.com/tags/Swift/index.xml" rel="self" type="application/rss+xml"/><item><title>语法</title><link>https://yindongliang.com/docs/Apple/Swift/%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E8%AF%AD%E6%B3%95/</guid><description>&lt;h2 id="官方文档">官方文档&lt;a class="anchor" href="#%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language">官方文档：The Swift Programming Language&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://developer.apple.com/documentation/swift">https://developer.apple.com/documentation/swift&lt;/a>&lt;/p>
&lt;h2 id="语言特点">语言特点&lt;a class="anchor" href="#%e8%af%ad%e8%a8%80%e7%89%b9%e7%82%b9">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.swift.org/about/">https://www.swift.org/about/&lt;/a>&lt;/p>
&lt;p>Swift is a general-purpose programming language that’s approachable for newcomers and powerful for experts. It is fast, modern, safe, and a joy to write.&lt;/p>
&lt;h2 id="变量声明">变量声明&lt;a class="anchor" href="#%e5%8f%98%e9%87%8f%e5%a3%b0%e6%98%8e">#&lt;/a>&lt;/h2>
&lt;p>swift 使用 &lt;code>let&lt;/code> 来声明常量，使用 &lt;code>var&lt;/code> 来声明变量。常量只能赋值一次。即：&lt;code>let&lt;/code> 的内存地址不能变，&lt;code>var&lt;/code> 的内存地址可变。&lt;/p></description></item><item><title>App Store Server API</title><link>https://yindongliang.com/links/202509/App-Store-Server-API/</link><pubDate>Tue, 30 Sep 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/links/202509/App-Store-Server-API/</guid><description>&lt;p>Manage your customers’ App Store transactions from your server.&lt;/p>
&lt;p>Related Link&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.apple.com/documentation/appstoreservernotifications">App Store Server Notifications&lt;/a>
&lt;ul>
&lt;li>Monitor In-App Purchase events in real time and learn of unreported external purchase tokens, with server notifications from the App Store.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/apple/app-store-server-library-node">https://github.com/apple/app-store-server-library-node&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Locale</title><link>https://yindongliang.com/docs/Apple/Foundation/Locale/</link><pubDate>Sun, 07 Sep 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Foundation/Locale/</guid><description>&lt;p>Apple 的 Foundation 框架中的 &lt;code>Locale&lt;/code>（在 macOS 和 iOS 开发中，&lt;code>NSLocale&lt;/code> 是其 Objective-C 版本）是一个非常重要的组件，它帮助你管理和利用用户的语言与区域设置信息。下面我将为你介绍它的体系结构、使用方式，并提供一些代码案例。&lt;/p></description></item><item><title>fileprivate</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/fileprivate/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/fileprivate/</guid><description>&lt;p>好的，我们来详细了解一下 Swift 中的 &lt;code>fileprivate&lt;/code> 关键字，以及它和 &lt;code>private&lt;/code> 关键字之间的区别。&lt;/p>
&lt;p>这两个关键字都属于 Swift 的访问控制（Access Control）体系，用于限制代码中某些部分的访问权限，从而帮助你隐藏实现细节，构建清晰的模块接口。&lt;/p></description></item><item><title>@unknown</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/unknown/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/unknown/</guid><description>&lt;p>在 Swift 中，&lt;code>@unknown&lt;/code> 是用于处理&lt;strong>非冻结枚举（Non-Frozen Enum）&lt;/strong> 的特殊修饰符，主要用于应对未来可能新增枚举成员的场景，避免因枚举扩展导致的兼容性问题。以下是其核心使用场景和方法的详细说明：&lt;/p></description></item><item><title>JSONEncoder &amp; JSONDecoder</title><link>https://yindongliang.com/docs/Apple/Foundation/JSONEncoder-and-JSONDecoder/</link><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Foundation/JSONEncoder-and-JSONDecoder/</guid><description>&lt;p>&lt;code>JSONEncoder&lt;/code> 和 &lt;code>JSONDecoder&lt;/code> 是 Swift Foundation 框架中用于实现 &lt;strong>JSON 数据与 Swift 对象之间序列化与反序列化&lt;/strong> 的核心工具。它们基于 &lt;code>Codable&lt;/code> 协议，提供了高效且类型安全的 JSON 处理能力。&lt;/p>
&lt;hr>
&lt;h2 id="核心概念">核心概念&lt;a class="anchor" href="#%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>Codable&lt;/code> 协议&lt;/strong>&lt;br>
&lt;code>Codable&lt;/code> 是 &lt;code>Encodable&lt;/code> 和 &lt;code>Decodable&lt;/code> 的类型别名。任何遵循 &lt;code>Codable&lt;/code> 的类型均可被编码为 JSON 或从 JSON 解码。&lt;/p></description></item><item><title>throws</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-throws/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-throws/</guid><description>&lt;h1 id="swift-错误处理throwthrows-与-try-的完整指南">Swift 错误处理：&lt;code>throw&lt;/code>、&lt;code>throws&lt;/code> 与 &lt;code>try&lt;/code> 的完整指南&lt;a class="anchor" href="#swift-%e9%94%99%e8%af%af%e5%a4%84%e7%90%86throwthrows-%e4%b8%8e-try-%e7%9a%84%e5%ae%8c%e6%95%b4%e6%8c%87%e5%8d%97">#&lt;/a>&lt;/h1>
&lt;h2 id="1-核心概念">1. 核心概念&lt;a class="anchor" href="#1-%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;h3 id="swift-错误处理三要素">Swift 错误处理三要素&lt;a class="anchor" href="#swift-%e9%94%99%e8%af%af%e5%a4%84%e7%90%86%e4%b8%89%e8%a6%81%e7%b4%a0">#&lt;/a>&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>关键字/机制&lt;/th>
 &lt;th>作用&lt;/th>
 &lt;th>阶段&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>throws&lt;/code>&lt;/td>
 &lt;td>声明函数可能抛出错误&lt;/td>
 &lt;td>函数声明&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>throw&lt;/code>&lt;/td>
 &lt;td>主动抛出错误实例&lt;/td>
 &lt;td>函数实现&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>try&lt;/code>&lt;/td>
 &lt;td>调用可能抛出错误的函数&lt;/td>
 &lt;td>函数调用&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>do-catch&lt;/code>&lt;/td>
 &lt;td>捕获和处理错误&lt;/td>
 &lt;td>错误处理&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="2-函数声明与-throws">2. 函数声明与 &lt;code>throws&lt;/code>&lt;a class="anchor" href="#2-%e5%87%bd%e6%95%b0%e5%a3%b0%e6%98%8e%e4%b8%8e-throws">#&lt;/a>&lt;/h2>
&lt;h3 id="基本语法">基本语法&lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">functionName&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">parameters&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#76a9f9">throws&lt;/span> &lt;span style="color:#abb2bf">-&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">ReturnType&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 实现可能抛出错误的代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关键特征">关键特征&lt;a class="anchor" href="#%e5%85%b3%e9%94%ae%e7%89%b9%e5%be%81">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>throws&lt;/code> 关键字的位置：在参数列表之后，返回类型之前&lt;/li>
&lt;li>可与其他修饰符组合：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">async&lt;/span> &lt;span style="color:#76a9f9">throws&lt;/span> &lt;span style="color:#abb2bf">-&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">Data&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 异步+可能抛出错误&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">mutating&lt;/span> &lt;span style="color:#76a9f9">throws&lt;/span> &lt;span style="color:#abb2bf">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Void&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 可变方法+可能抛出错误&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="返回值类型示例">返回值类型示例&lt;a class="anchor" href="#%e8%bf%94%e5%9b%9e%e5%80%bc%e7%b1%bb%e5%9e%8b%e7%a4%ba%e4%be%8b">#&lt;/a>&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>声明形式&lt;/th>
 &lt;th>含义&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>func a() -&amp;gt; String&lt;/code>&lt;/td>
 &lt;td>返回 String，不抛出错误&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>func b() throws -&amp;gt; String&lt;/code>&lt;/td>
 &lt;td>返回 String，可能抛出错误&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>func c() throws&lt;/code>&lt;/td>
 &lt;td>没有返回值，可能抛出错误（等价于 &lt;code>throws -&amp;gt; Void&lt;/code>）&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="3-错误抛出-throw">3. 错误抛出 (&lt;code>throw&lt;/code>)&lt;a class="anchor" href="#3-%e9%94%99%e8%af%af%e6%8a%9b%e5%87%ba-throw">#&lt;/a>&lt;/h2>
&lt;h3 id="错误类型要求">错误类型要求&lt;a class="anchor" href="#%e9%94%99%e8%af%af%e7%b1%bb%e5%9e%8b%e8%a6%81%e6%b1%82">#&lt;/a>&lt;/h3>
&lt;p>必须实现 &lt;code>Error&lt;/code> 协议：&lt;/p></description></item><item><title>@escaping</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/escaping/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/escaping/</guid><description>&lt;h1 id="swift-中的-escaping-详解">Swift 中的 @escaping 详解&lt;a class="anchor" href="#swift-%e4%b8%ad%e7%9a%84-escaping-%e8%af%a6%e8%a7%a3">#&lt;/a>&lt;/h1>
&lt;p>&lt;code>@escaping&lt;/code> 是 Swift 中用于标记闭包参数的一个重要属性，它表示该闭包可能在函数返回后被调用（即&amp;quot;逃逸&amp;quot;出函数的作用域）。&lt;/p>
&lt;h2 id="使用场景">使用场景&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af">#&lt;/a>&lt;/h2>
&lt;h3 id="1-异步操作">1. 异步操作&lt;a class="anchor" href="#1-%e5%bc%82%e6%ad%a5%e6%93%8d%e4%bd%9c">#&lt;/a>&lt;/h3>
&lt;p>最常见的场景是在异步操作中，闭包被存储起来稍后调用：&lt;/p></description></item><item><title>@Namespace</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/Namespace/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/Namespace/</guid><description>&lt;h1 id="swiftui-中的-namespace-和命名空间动画">SwiftUI 中的 &lt;code>@Namespace&lt;/code> 和命名空间动画&lt;a class="anchor" href="#swiftui-%e4%b8%ad%e7%9a%84-namespace-%e5%92%8c%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4%e5%8a%a8%e7%94%bb">#&lt;/a>&lt;/h1>
&lt;p>&lt;code>@Namespace&lt;/code> 是 SwiftUI 中的一个属性包装器，用于创建动画命名空间，主要用于在不同视图之间创建平滑的过渡动画，特别是匹配几何效果（Matched Geometry Effects）。&lt;/p></description></item><item><title>Codable</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE/Codable/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE/Codable/</guid><description>&lt;h1 id="swift-codable-协议详解">Swift Codable 协议详解&lt;a class="anchor" href="#swift-codable-%e5%8d%8f%e8%ae%ae%e8%af%a6%e8%a7%a3">#&lt;/a>&lt;/h1>
&lt;h2 id="概述">概述&lt;a class="anchor" href="#%e6%a6%82%e8%bf%b0">#&lt;/a>&lt;/h2>
&lt;p>Codable 是 Swift 4 引入的一个强大协议，它实际上是 &lt;code>Decodable&lt;/code> 和 &lt;code>Encodable&lt;/code> 两个协议的组合。通过实现 Codable，Swift 对象可以与外部表示（如 JSON、Property List 等）相互转换。&lt;/p></description></item><item><title>Hashable</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE/Hashable/</link><pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE/Hashable/</guid><description>&lt;p>Swift 中的 &lt;code>Hashable&lt;/code> 协议是一个用于生成&lt;strong>哈希值&lt;/strong>的核心协议，它使得遵循该协议的类型可以将实例转换为唯一的整数值（哈希值）。这个协议在集合类型（如 &lt;code>Set&lt;/code> 和 &lt;code>Dictionary&lt;/code>）的高效存储和查找中至关重要。&lt;/p></description></item><item><title>TaskPriority</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskPriority/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskPriority/</guid><description>&lt;p>在 Swift 的并发编程模型中，&lt;a href="https://developer.apple.com/documentation/swift/taskpriority">&lt;code>TaskPriority&lt;/code>&lt;/a> 用于定义任务的执行优先级，帮助系统调度器决定任务的执行顺序。以下是 &lt;code>TaskPriority&lt;/code> 中各个优先级的详细介绍、使用场景及示例：&lt;/p>
&lt;hr>
&lt;h3 id="taskpriority-优先级类型">&lt;code>TaskPriority&lt;/code> 优先级类型&lt;a class="anchor" href="#taskpriority-%e4%bc%98%e5%85%88%e7%ba%a7%e7%b1%bb%e5%9e%8b">#&lt;/a>&lt;/h3>
&lt;p>Swift 提供了以下优先级类型（从高到低）：&lt;/p></description></item><item><title>switch</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/switch/</link><pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/switch/</guid><description>&lt;p>Swift 中的 &lt;code>switch&lt;/code> 语句非常强大，支持模式匹配、范围匹配、元组、枚举关联值等多种用法。以下是一些常见且实用的例子：&lt;/p>
&lt;hr>
&lt;h3 id="1-基础用法匹配具体值">1. &lt;strong>基础用法：匹配具体值&lt;/strong>&lt;a class="anchor" href="#1-%e5%9f%ba%e7%a1%80%e7%94%a8%e6%b3%95%e5%8c%b9%e9%85%8d%e5%85%b7%e4%bd%93%e5%80%bc">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">fruit&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;apple&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">fruit&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;apple&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;It&amp;#39;s an apple!&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;banana&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;It&amp;#39;s a banana!&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Unknown fruit&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：It&amp;#39;s an apple!&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="2-范围匹配range-matching">2. &lt;strong>范围匹配（Range Matching）&lt;/strong>&lt;a class="anchor" href="#2-%e8%8c%83%e5%9b%b4%e5%8c%b9%e9%85%8drange-matching">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">score&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">85&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">score&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#abb2bf">.&amp;lt;&lt;/span>&lt;span style="color:#d19a66">60&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;不及格&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#d19a66">60.&lt;/span>&lt;span style="color:#abb2bf">.&amp;lt;&lt;/span>&lt;span style="color:#d19a66">80&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;及格&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#d19a66">80.&lt;/span>&lt;span style="color:#abb2bf">..&lt;/span>&lt;span style="color:#d19a66">100&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;优秀&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;无效分数&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：优秀&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="3-元组tuple匹配">3. &lt;strong>元组（Tuple）匹配&lt;/strong>&lt;a class="anchor" href="#3-%e5%85%83%e7%bb%84tuple%e5%8c%b9%e9%85%8d">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">point&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">y&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">point&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;原点&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">_&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;在 x 轴上&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">_&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;在 y 轴上&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#54b1c7">-&lt;/span>&lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#abb2bf">..&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#54b1c7">-&lt;/span>&lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#abb2bf">..&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;在 4x4 的区域内&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;其他位置&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：在 4x4 的区域内&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="4-枚举enum匹配">4. &lt;strong>枚举（Enum）匹配&lt;/strong>&lt;a class="anchor" href="#4-%e6%9e%9a%e4%b8%beenum%e5%8c%b9%e9%85%8d">#&lt;/a>&lt;/h3>
&lt;h4 id="普通枚举">普通枚举：&lt;a class="anchor" href="#%e6%99%ae%e9%80%9a%e6%9e%9a%e4%b8%be">#&lt;/a>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">enum&lt;/span> &lt;span style="color:#ca72ff">Direction&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#aa89ea">north&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">south&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">east&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">west&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">dir&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">Direction&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">north&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">dir&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">north&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;向北&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">south&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;向南&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">east&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;向东&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">west&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;向西&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：向北&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="带关联值的枚举">带关联值的枚举：&lt;a class="anchor" href="#%e5%b8%a6%e5%85%b3%e8%81%94%e5%80%bc%e7%9a%84%e6%9e%9a%e4%b8%be">#&lt;/a>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">enum&lt;/span> &lt;span style="color:#ca72ff">NetworkResponse&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#aa89ea">success&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">code&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">data&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#aa89ea">failure&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">error&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">response&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">NetworkResponse&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">success&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">code&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#d19a66">200&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">data&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#98c379">&amp;#34;数据加载成功&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">response&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">success&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">code&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">data&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">code&lt;/span> &lt;span style="color:#abb2bf">==&lt;/span> &lt;span style="color:#d19a66">200&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;成功：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">data&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">success&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">code&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">_&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;其他状态码：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">code&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">failure&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">error&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;失败：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">error&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：成功：数据加载成功&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="5-使用">5. &lt;strong>使用 &lt;code>where&lt;/code> 子句过滤条件&lt;/strong>&lt;a class="anchor" href="#5-%e4%bd%bf%e7%94%a8">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">number&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">number&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">x&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">x&lt;/span> &lt;span style="color:#54b1c7">%&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#abb2bf">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379"> 是偶数&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">x&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">x&lt;/span> &lt;span style="color:#54b1c7">%&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#54b1c7">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379"> 是奇数&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">break&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 不会执行到这里&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：7 是奇数&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="6-值绑定value-binding">6. &lt;strong>值绑定（Value Binding）&lt;/strong>&lt;a class="anchor" href="#6-%e5%80%bc%e7%bb%91%e5%ae%9avalue-binding">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">value&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Any&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">str&lt;/span> &lt;span style="color:#76a9f9">as&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;字符串：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">str&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">num&lt;/span> &lt;span style="color:#76a9f9">as&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">num&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;正整数：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">num&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">num&lt;/span> &lt;span style="color:#76a9f9">as&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;其他整数：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">num&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;未知类型&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：正整数：42&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="7-使用">7. &lt;strong>使用 &lt;code>fallthrough&lt;/code> 继续执行下一个 case&lt;/strong>&lt;a class="anchor" href="#7-%e4%bd%bf%e7%94%a8">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">num&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">num&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;是 5&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">fallthrough&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#d19a66">6&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;继续执行到 6 的 case&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;其他&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 是 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 继续执行到 6 的 case&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="8-结合">8. &lt;strong>结合 &lt;code>guard&lt;/code> 提前退出&lt;/strong>&lt;a class="anchor" href="#8-%e7%bb%93%e5%90%88">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">checkValue&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">_&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">?)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#76a9f9">none&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;值为 nil&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">some&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">val&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">val&lt;/span> &lt;span style="color:#54b1c7">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;值不能为负数&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">some&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">val&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">guard&lt;/span> &lt;span style="color:#aa89ea">val&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">100&lt;/span> &lt;span style="color:#76a9f9">else&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;值超过 100: &lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">val&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">checkValue&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">150&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 输出：值超过 100: 150&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">checkValue&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">50&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 无输出（guard 提前退出）&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="9-匹配可选类型optional">9. &lt;strong>匹配可选类型（Optional）&lt;/strong>&lt;a class="anchor" href="#9-%e5%8c%b9%e9%85%8d%e5%8f%af%e9%80%89%e7%b1%bb%e5%9e%8boptional">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">optionalValue&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">?&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">optionalValue&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">some&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">value&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;有值：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">value&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#76a9f9">none&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;无值&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：有值：10&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="10-模式匹配--类型检查">10. &lt;strong>模式匹配 + 类型检查&lt;/strong>&lt;a class="anchor" href="#10-%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d--%e7%b1%bb%e5%9e%8b%e6%a3%80%e6%9f%a5">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">mixedValue&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Any&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">mixedValue&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">is&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;这是一个整数&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">str&lt;/span> &lt;span style="color:#76a9f9">as&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">str&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">count&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;长字符串：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">str&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">str&lt;/span> &lt;span style="color:#76a9f9">as&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;短字符串：&lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#aa89ea">str&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;未知类型&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 输出：短字符串：Hello&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="总结">总结&lt;a class="anchor" href="#%e6%80%bb%e7%bb%93">#&lt;/a>&lt;/h3>
&lt;p>Swift 的 &lt;code>switch&lt;/code> 支持以下特性：&lt;/p></description></item><item><title>throw</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-throw/</link><pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-throw/</guid><description>&lt;h3 id="swift-中-throw-关键字的使用场景与示例详解">Swift 中 &lt;code>throw&lt;/code> 关键字的使用场景与示例详解&lt;a class="anchor" href="#swift-%e4%b8%ad-throw-%e5%85%b3%e9%94%ae%e5%ad%97%e7%9a%84%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af%e4%b8%8e%e7%a4%ba%e4%be%8b%e8%af%a6%e8%a7%a3">#&lt;/a>&lt;/h3>
&lt;p>在 Swift 中，&lt;code>throw&lt;/code> 关键字是错误处理模型的核心组成部分，用于主动抛出符合 &lt;code>Error&lt;/code> 协议的异常类型。以下结合具体场景和示例详细说明其用法。&lt;/p></description></item><item><title>Error</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE/Error/</link><pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE/Error/</guid><description>&lt;p>在 Swift 中，错误处理通过 &lt;code>Error&lt;/code> 协议实现，允许开发者定义、抛出和捕获自定义错误类型。&lt;code>localizedDescription&lt;/code> 是 &lt;code>NSError&lt;/code> 的属性，用于获取错误的本地化描述。以下是详细说明及示例：&lt;/p></description></item><item><title>特殊标记</title><link>https://yindongliang.com/docs/Apple/Swift/%E7%89%B9%E6%AE%8A%E6%A0%87%E8%AE%B0/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E7%89%B9%E6%AE%8A%E6%A0%87%E8%AE%B0/</guid><description>&lt;p>在 Swift 中，编译器提供的特殊标记（Compiler Identifiers）是一组由编译器生成的元信息变量。这些变量在编译时会被替换为具体的值，通常用于调试、日志记录或生成代码元信息。以下是关于这些特殊标记的整体介绍和体系结构。&lt;/p></description></item><item><title>Actor 模型</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Actor-%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Actor-%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h2 id="actor-模型详解">&lt;strong>Actor 模型详解&lt;/strong>&lt;a class="anchor" href="#actor-%e6%a8%a1%e5%9e%8b%e8%af%a6%e8%a7%a3">#&lt;/a>&lt;/h2>
&lt;p>Actor 模型是一种并发编程范式，其核心思想是通过&lt;strong>数据隔离&lt;/strong>和&lt;strong>异步消息传递&lt;/strong>解决多线程环境下的数据竞争问题。以下是其核心概念、设计背景及实现思想的详细解析：&lt;/p></description></item><item><title>Thread</title><link>https://yindongliang.com/docs/Apple/Foundation/Thread/</link><pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Foundation/Thread/</guid><description>&lt;p>&lt;a href="https://developer.apple.com/documentation/foundation/thread">官方文档&lt;/a>&lt;/p>
&lt;h2 id="通义">通义&lt;a class="anchor" href="#%e9%80%9a%e4%b9%89">#&lt;/a>&lt;/h2>
&lt;p>以下是关于 Foundation 框架中 &lt;code>Thread&lt;/code> 模块的详细介绍：&lt;/p>
&lt;h3 id="1-thread-模块简介">1. &lt;strong>Thread 模块简介&lt;/strong>&lt;a class="anchor" href="#1-thread-%e6%a8%a1%e5%9d%97%e7%ae%80%e4%bb%8b">#&lt;/a>&lt;/h3>
&lt;p>&lt;code>Thread&lt;/code> 是 Foundation 框架中的一个核心模块，用于处理多线程编程。它允许开发者在 macOS 和 iOS 等 Apple 平台上创建、管理和操作线程，从而实现并发执行任务。&lt;/p></description></item><item><title> 线程安全</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</guid><description>&lt;h2 id="1-什么是线程安全">&lt;strong>1. 什么是线程安全？&lt;/strong>&lt;a class="anchor" href="#1-%e4%bb%80%e4%b9%88%e6%98%af%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8">#&lt;/a>&lt;/h2>
&lt;p>&lt;strong>线程安全（Thread Safety）&lt;/strong> 指的是在多线程环境中，代码或数据结构可以被多个线程&lt;strong>同时访问&lt;/strong>而不会产生 &lt;strong>数据竞争（Data Race）&lt;/strong> 或 &lt;strong>不可预期的行为&lt;/strong>。&lt;/p></description></item><item><title>async/await</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/async-await/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/async-await/</guid><description>&lt;h3 id="-swift-中">🚀 &lt;strong>Swift 中 &lt;code>async/await&lt;/code> 的完整指南&lt;/strong>&lt;a class="anchor" href="#-swift-%e4%b8%ad">#&lt;/a>&lt;/h3>
&lt;p>&lt;code>async/await&lt;/code> 是 Swift 5.5 引入的异步编程模型，基于 &lt;strong>Swift Concurrency&lt;/strong>，旨在替代传统的回调闭包（Closures）和 GCD（Grand Central Dispatch）写法。它可以让异步代码像同步代码一样简洁、可读，极大地简化了处理异步任务的复杂性。&lt;/p></description></item><item><title>Distributed</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Distributed/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Distributed/</guid><description>&lt;p>在 Swift 中，&lt;a href="https://developer.apple.com/documentation/distributed">&lt;code>Distributed&lt;/code>&lt;/a> 是一个与分布式系统相关的概念，通常用于描述跨多个节点或进程的计算和通信。Swift 5.7 引入了 &lt;code>Distributed Actors&lt;/code>，这是 Swift 并发模型的一部分，旨在简化分布式系统的开发。&lt;/p></description></item><item><title>MainActor</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/MainActor/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/MainActor/</guid><description>&lt;h3 id="-swift-并发中的">🚀 &lt;strong>Swift 并发中的 &lt;code>@MainActor&lt;/code> 全面解析&lt;/strong>&lt;a class="anchor" href="#-swift-%e5%b9%b6%e5%8f%91%e4%b8%ad%e7%9a%84">#&lt;/a>&lt;/h3>
&lt;p>在 Swift 并发编程中，&lt;strong>&lt;code>@MainActor&lt;/code>&lt;/strong> 是保证线程安全、确保代码在主线程（Main Thread）上执行的重要工具。它在处理 &lt;strong>UI 更新、线程同步&lt;/strong> 等场景时尤为关键，尤其适用于 &lt;strong>SwiftUI 和 UIKit&lt;/strong> 环境。&lt;/p></description></item><item><title>Sendable</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Sendable/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Sendable/</guid><description>&lt;h2 id="1-什么是">&lt;strong>1. 什么是 &lt;code>Sendable&lt;/code>？&lt;/strong>&lt;a class="anchor" href="#1-%e4%bb%80%e4%b9%88%e6%98%af">#&lt;/a>&lt;/h2>
&lt;p>&lt;code>Sendable&lt;/code> 是 &lt;strong>Swift 并发模型&lt;/strong> 引入的一个协议，用于确保类型在多个线程或并发上下文中传递时是 &lt;strong>线程安全&lt;/strong> 的。它的核心作用是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>标记数据是否可以安全地在任务、线程或 Actor 之间共享。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>防止数据竞争条件，提升代码的并发可靠性。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">struct&lt;/span> &lt;span style="color:#ca72ff">User&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">Sendable&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">name&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">age&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个例子中，&lt;code>User&lt;/code> 结构体是不可变的（&lt;code>let&lt;/code> 属性），因此它天然是线程安全的，符合 &lt;code>Sendable&lt;/code> 要求。&lt;/p></description></item><item><title>Synchronization</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Synchronization/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Synchronization/</guid><description>&lt;p>在 Swift 中，&lt;a href="https://developer.apple.com/documentation/synchronization">&lt;strong>Synchronization&lt;/strong>&lt;/a>（同步）是指确保多个线程或任务在访问共享资源时不会发生冲突或数据竞争。由于 Swift 是一种支持并发编程的语言，因此在多线程环境下，同步机制尤为重要。&lt;/p>
&lt;p>以下是 Swift 中常s用的同步机制和工具：&lt;/p>
&lt;hr>
&lt;h3 id="1-dispatchqueue串行队列">1. &lt;strong>DispatchQueue（串行队列）&lt;/strong>&lt;a class="anchor" href="#1-dispatchqueue%e4%b8%b2%e8%a1%8c%e9%98%9f%e5%88%97">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>使用串行队列可以确保任务按顺序执行，避免多个线程同时访问共享资源。&lt;/li>
&lt;li>通过将任务放在同一个串行队列中，可以实现同步。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">serialQueue&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">DispatchQueue&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">label&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#98c379">&amp;#34;com.example.serialQueue&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">serialQueue&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">async&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 访问共享资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="2-dispatchsemaphore信号量">2. &lt;strong>DispatchSemaphore（信号量）&lt;/strong>&lt;a class="anchor" href="#2-dispatchsemaphore%e4%bf%a1%e5%8f%b7%e9%87%8f">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>信号量用于控制对共享资源的访问数量。&lt;/li>
&lt;li>通过 &lt;code>wait()&lt;/code> 和 &lt;code>signal()&lt;/code> 方法实现资源的锁定和释放。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">semaphore&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">DispatchSemaphore&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">value&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">semaphore&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">wait&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 锁定资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 访问共享资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">semaphore&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">signal&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 释放资源&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="3-nslock锁">3. &lt;strong>NSLock（锁）&lt;/strong>&lt;a class="anchor" href="#3-nslock%e9%94%81">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>NSLock&lt;/code> 是一个简单的互斥锁，用于保护共享资源。&lt;/li>
&lt;li>通过 &lt;code>lock()&lt;/code> 和 &lt;code>unlock()&lt;/code> 方法实现资源的锁定和释放。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">lock&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">NSLock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 访问共享资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">unlock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="4-nsrecursivelock递归锁">4. &lt;strong>NSRecursiveLock（递归锁）&lt;/strong>&lt;a class="anchor" href="#4-nsrecursivelock%e9%80%92%e5%bd%92%e9%94%81">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>NSRecursiveLock&lt;/code> 是 &lt;code>NSLock&lt;/code> 的递归版本，允许同一线程多次锁定资源而不会导致死锁。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">recursiveLock&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">NSRecursiveLock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">recursiveLock&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 访问共享资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">recursiveLock&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">unlock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="5-nscondition条件锁">5. &lt;strong>NSCondition（条件锁）&lt;/strong>&lt;a class="anchor" href="#5-nscondition%e6%9d%a1%e4%bb%b6%e9%94%81">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>NSCondition&lt;/code> 结合了锁和条件变量，用于线程间的通信和同步。&lt;/li>
&lt;li>通过 &lt;code>wait()&lt;/code>、&lt;code>signal()&lt;/code> 和 &lt;code>broadcast()&lt;/code> 方法实现线程等待和唤醒。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">condition&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">NSCondition&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">condition&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">while&lt;/span> &lt;span style="color:#54b1c7">!&lt;/span>&lt;span style="color:#aa89ea">resourceAvailable&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">condition&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">wait&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 访问共享资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">condition&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">unlock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="6-atomic属性包装器">6. &lt;strong>@Atomic（属性包装器）&lt;/strong>&lt;a class="anchor" href="#6-atomic%e5%b1%9e%e6%80%a7%e5%8c%85%e8%a3%85%e5%99%a8">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>在 Swift 中，可以通过自定义属性包装器实现原子操作。&lt;/li>
&lt;li>例如，使用 &lt;code>OSAtomic&lt;/code> 或 &lt;code>DispatchQueue&lt;/code> 实现原子性。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">@&lt;/span>&lt;span style="color:#aa89ea">propertyWrapper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">struct&lt;/span> &lt;span style="color:#ca72ff">Atomic&lt;/span>&lt;span style="color:#abb2bf">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">Value&lt;/span>&lt;span style="color:#abb2bf">&amp;gt;&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">value&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">queue&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">DispatchQueue&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">label&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#98c379">&amp;#34;com.example.atomicQueue&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">init&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">wrappedValue&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">Value&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">wrappedValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">wrappedValue&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">Value&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">get&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span> &lt;span style="color:#aa89ea">queue&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">sync&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#abb2bf">}&lt;/span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">set&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span> &lt;span style="color:#aa89ea">queue&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">sync&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">newValue&lt;/span> &lt;span style="color:#abb2bf">}&lt;/span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">@&lt;/span>&lt;span style="color:#aa89ea">Atomic&lt;/span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">counter&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="7-actorswift-55-引入">7. &lt;strong>Actor（Swift 5.5 引入）&lt;/strong>&lt;a class="anchor" href="#7-actorswift-55-%e5%bc%95%e5%85%a5">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Actor&lt;/code> 是 Swift 5.5 引入的一种并发模型，用于解决数据竞争问题。&lt;/li>
&lt;li>&lt;code>Actor&lt;/code> 内部会自动处理同步，确保在同一时间只有一个任务可以访问其状态。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">actor&lt;/span> &lt;span style="color:#aa89ea">Counter&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">value&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">increment&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#54b1c7">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">getValue&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">counter&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">Counter&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">Task&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">await&lt;/span> &lt;span style="color:#aa89ea">counter&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">increment&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">await&lt;/span> &lt;span style="color:#aa89ea">counter&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">getValue&lt;/span>&lt;span style="color:#abb2bf">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="8-os_">8. &lt;strong>os_unfair_lock（低级锁）&lt;/strong>&lt;a class="anchor" href="#8-os_">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>os_unfair_lock&lt;/code> 是一种高效的锁，适用于性能敏感的场景。&lt;/li>
&lt;li>它是不可递归的，使用时需要小心避免死锁。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">lock&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">os_unfair_lock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">os_unfair_lock_lock&lt;/span>&lt;span style="color:#abb2bf">(&amp;amp;&lt;/span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 访问共享资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">os_unfair_lock_unlock&lt;/span>&lt;span style="color:#abb2bf">(&amp;amp;&lt;/span>&lt;span style="color:#aa89ea">lock&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="9-thread-sanitizer线程检查工具">9. &lt;strong>Thread Sanitizer（线程检查工具）&lt;/strong>&lt;a class="anchor" href="#9-thread-sanitizer%e7%ba%bf%e7%a8%8b%e6%a3%80%e6%9f%a5%e5%b7%a5%e5%85%b7">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>在开发过程中，可以使用 Xcode 的 Thread Sanitizer 工具检测数据竞争和线程安全问题。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="总结">总结&lt;a class="anchor" href="#%e6%80%bb%e7%bb%93">#&lt;/a>&lt;/h3>
&lt;p>Swift 提供了多种同步机制，开发者可以根据具体场景选择合适的工具：&lt;/p></description></item><item><title>TaskGroup</title><link>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskGroup/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/SwiftUI/Task/TaskGroup/</guid><description>&lt;h3 id="-swift-并发中的">🚀 &lt;strong>Swift 并发中的 &lt;code>withTaskGroup&lt;/code> 与 &lt;code>TaskGroup&lt;/code> 全面解析&lt;/strong>&lt;a class="anchor" href="#-swift-%e5%b9%b6%e5%8f%91%e4%b8%ad%e7%9a%84">#&lt;/a>&lt;/h3>
&lt;p>Swift 5.5 引入了结构化并发（Structured Concurrency），其中 &lt;strong>&lt;code>withTaskGroup&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>TaskGroup&lt;/code>&lt;/strong> 是实现并发任务管理的核心工具。它们可以让你轻松创建、管理和取消多个异步任务，极大地提升代码的性能与可读性。&lt;/p></description></item><item><title>Struct 中的 self 使用</title><link>https://yindongliang.com/docs/Apple/Swift/struct-self/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/struct-self/</guid><description>&lt;p>在 SwiftUI 中，&lt;code>self&lt;/code> 的使用与 Swift 语言本身的规则一致。通常情况下，Swift 允许你在不引起歧义的情况下省略 &lt;code>self&lt;/code>。然而，在某些特定情况下，使用 &lt;code>self&lt;/code> 是必要的或推荐的。以下是详细说明：&lt;/p></description></item><item><title>CKModifyRecordsOperation</title><link>https://yindongliang.com/docs/Apple/CloudKit/CKModifyRecordsOperation/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/CKModifyRecordsOperation/</guid><description>&lt;h3 id="ckmodifyrecordsoperation">&lt;strong>&lt;code>CKModifyRecordsOperation&lt;/code> 是什么？&lt;/strong>&lt;a class="anchor" href="#ckmodifyrecordsoperation">#&lt;/a>&lt;/h3>
&lt;p>&lt;code>CKModifyRecordsOperation&lt;/code> 是 Apple 提供的 &lt;strong>CloudKit Framework&lt;/strong> 中的一个操作类，用于批量创建、修改或删除 CloudKit 数据库中的 records。&lt;/p>
&lt;p>CloudKit 的核心概念之一是 &lt;strong>Record&lt;/strong>（记录），它类似于传统数据库的一行数据，由 &lt;code>CKRecord&lt;/code> 表示。而 &lt;code>CKModifyRecordsOperation&lt;/code> 是操作 &lt;code>CKRecord&lt;/code> 的一种高级工具，它允许你一次性创建、更新或删除多个记录。&lt;/p></description></item><item><title>deinit</title><link>https://yindongliang.com/docs/Apple/Swift/deinit/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/deinit/</guid><description>&lt;h3 id="deinit">&lt;strong>&lt;code>deinit&lt;/code> 的介绍&lt;/strong>&lt;a class="anchor" href="#deinit">#&lt;/a>&lt;/h3>
&lt;p>在 Swift 中，&lt;strong>&lt;code>deinit&lt;/code>&lt;/strong> 是一个特殊的析构函数（或析构器），&lt;strong>在类的实例被销毁时自动调用&lt;/strong>。&lt;code>deinit&lt;/code> 的主要作用是&lt;strong>执行清理工作&lt;/strong>，以释放资源、移除监听器或关闭任务。&lt;/p></description></item><item><title> 冲突处理机制</title><link>https://yindongliang.com/docs/Apple/CloudKit/%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</guid><description>&lt;p>当两个离线设备都对 &lt;strong>同一条记录&lt;/strong> 进行了修改，在恢复网络并通过 CloudKit 上传到 iCloud 时，最终结果依赖于 &lt;strong>CloudKit 的冲突解决机制（Conflict Resolution）&lt;/strong>。以下是详细的解释：&lt;/p></description></item><item><title>queryable 和 searchable</title><link>https://yindongliang.com/docs/Apple/CloudKit/queryable-%E5%92%8C-searchable/</link><pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/queryable-%E5%92%8C-searchable/</guid><description>&lt;p>&lt;strong>CloudKit Index&lt;/strong> 是用来优化 CloudKit 数据查询性能的机制，与数据库中的索引类似。索引能够提高在 CloudKit 数据库（比如 Public Database 或 Private Database）中查询特定字段或数据的效率，让你的查询请求（&lt;code>CKQuery&lt;/code>）更快地执行。&lt;/p></description></item><item><title>为 CloudKit 配置消息通知</title><link>https://yindongliang.com/docs/Apple/CloudKit/%E4%B8%BA-cloudkit-%E9%85%8D%E7%BD%AE%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5/</link><pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/%E4%B8%BA-cloudkit-%E9%85%8D%E7%BD%AE%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5/</guid><description>&lt;p>为 &lt;strong>CloudKit 配置消息通知&lt;/strong>主要用于当 CloudKit 中的数据发生更新时，客户端可以实时接收到通知。这对于需要在多个设备之间同步数据、协作功能或需要对云端数据更改做出反馈的场景非常有用。&lt;/p></description></item><item><title>Database 类型</title><link>https://yindongliang.com/docs/Apple/CloudKit/Database-Type/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/Database-Type/</guid><description>&lt;p>在 &lt;strong>CloudKit&lt;/strong> 中，数据库分为三种类型：&lt;strong>Private Database&lt;/strong>（私有数据库）、&lt;strong>Public Database&lt;/strong>（公共数据库）和 &lt;strong>Shared Database&lt;/strong>（共享数据库）。它们在数据的访问权限、可见性、存储配额、使用场景等方面有很大的区别。以下是详细的解释和对比：&lt;/p></description></item><item><title>Subscriptions</title><link>https://yindongliang.com/docs/Apple/CloudKit/Subscriptions/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/Subscriptions/</guid><description>&lt;p>在 Apple 的 &lt;strong>CloudKit 控制台&lt;/strong>中的 &lt;strong>Data - Subscriptions&lt;/strong> 部分，是管理和查看 CloudKit 中**订阅（Subscriptions）**的界面。订阅是 CloudKit 提供的一种机制，它允许你对特定的数据变化进行监听并触发相应的通知。例如，当特定条件的数据发生更新、插入或删除时，你的应用可以被通知。&lt;/p></description></item><item><title>Zone</title><link>https://yindongliang.com/docs/Apple/CloudKit/Zone/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/Zone/</guid><description>&lt;p>在使用 &lt;strong>CloudKit 和 Core Data&lt;/strong> 集成时，您可能会遇到 &lt;code>com.apple.coredata.cloudkit.zone&lt;/code> 和 &lt;code>_defaultZone&lt;/code> 两个 Zone 名称。它们分别表示 &lt;strong>Core Data 与 CloudKit 的默认 Zone&lt;/strong> 及 &lt;strong>CloudKit 的默认 Zone&lt;/strong>，但它们的作用和使用场景略有不同。以下是对它们的详细解析和对比。&lt;/p></description></item><item><title> 元组（Tuple）</title><link>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tuple/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tuple/</guid><description>&lt;p>在 Swift 中，&lt;strong>元组 (Tuple)&lt;/strong> 是一个轻量级的数据结构，用于将多个值组合成一个复合值。与数组和字典不同，元组的值可以是任意类型，并且值的数量是固定的。元组非常适合作为临时数据在代码中传递和使用。&lt;/p></description></item><item><title> 字符串（String）</title><link>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/String/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/String/</guid><description>&lt;p>在 Swift 中，&lt;strong>&lt;code>String&lt;/code>&lt;/strong> 是一种用于操作和表示文本的强大数据类型。它是 Unicode 兼容的，可存储和操作多种语言文字，并且提供了丰富的接口（方法和属性）来进行字符串操作。以下是 Swift &lt;strong>&lt;code>String&lt;/code>&lt;/strong> 的常用接口和功能分类介绍。&lt;/p></description></item><item><title>CD_entityName(Record Types)</title><link>https://yindongliang.com/docs/Apple/CloudKit/CD_entityName/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/CD_entityName/</guid><description>&lt;p>&lt;code>CD_entityName&lt;/code> 是一个 &lt;strong>特殊的字段&lt;/strong>，但它并不是 CloudKit 自行生成或默认管理的字段，而是在结合 &lt;strong>Core Data 和 CloudKit&lt;/strong> 使用时由 &lt;strong>Core Data&lt;/strong> 自动生成并管理的一个字段。&lt;/p>
&lt;p>这个字段的主要作用是为每个存储在 CloudKit 上的记录 (Record) 指定其在 Core Data 中对应的实体名称 (&lt;code>Entity Name&lt;/code>)，从而在同步和解析数据时能够正确关联到 Core Data 模型。&lt;/p></description></item><item><title>Metadata(Record Types)</title><link>https://yindongliang.com/docs/Apple/CloudKit/Metadata/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/CloudKit/Metadata/</guid><description>&lt;p>在 CloudKit 的 &lt;code>Record Types&lt;/code> 配置中， &lt;strong>Metadata（元数据）&lt;/strong> 是指系统为特定记录类型（如这里的 &lt;code>CD_Todo&lt;/code>）自动管理的附加信息，这些字段主要描述了记录的创建、修改和管理信息，而不是由开发者直接添加或管理的用户数据。&lt;/p></description></item><item><title>集合（Set）</title><link>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Set/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Set/</guid><description>&lt;p>在 Swift 中，&lt;code>Set&lt;/code> 是一个无序的集合类型，用来存储唯一、不可重复的值。与数组 (Array) 不同，Set 的元素没有固定顺序，同时保证每个元素的值是唯一的，且其操作效率非常高（基于哈希表）。&lt;/p></description></item><item><title>数组（Array）</title><link>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Array/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Array/</guid><description>&lt;p>在 Swift 中，&lt;a href="https://developer.apple.com/documentation/swift/array">&lt;code>Array&lt;/code>&lt;/a> 是一个常用的数据结构，提供了很多强大的接口（方法和属性）来管理、操作和查询数组。以下是常用接口的分类和对应的说明，涵盖 &lt;code>remove&lt;/code>, &lt;code>first&lt;/code> 等常见的操作以及其它你可能感兴趣的功能。&lt;/p></description></item><item><title>字典（Dict）</title><link>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Dict/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Dict/</guid><description>&lt;p>在 Swift 中，&lt;code>Dictionary&lt;/code> 是一组 &lt;strong>键值对&lt;/strong> 的集合，提供了许多接口（方法和属性）来管理和操作字典。&lt;code>Dictionary&lt;/code> 的键是唯一的，值可以是任意类型，甚至可以重复。以下是 &lt;code>Dictionary&lt;/code> 的常用接口，按功能分类列表并附中文说明及示例。&lt;/p></description></item><item><title> 闭包（closure）（闭包捕获）</title><link>https://yindongliang.com/docs/Apple/Swift/closure-%E9%97%AD%E5%8C%85/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/closure-%E9%97%AD%E5%8C%85/</guid><description>&lt;h2 id="在捕获列表中使用弱引用">在捕获列表中使用弱引用&lt;a class="anchor" href="#%e5%9c%a8%e6%8d%95%e8%8e%b7%e5%88%97%e8%a1%a8%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%bc%b1%e5%bc%95%e7%94%a8">#&lt;/a>&lt;/h2>
&lt;p>&lt;code>[weak self]&lt;/code> 是 Swift 中闭包（closure）捕获列表的一部分，用于避免强引用循环（retain cycles）。在使用闭包时，特别是在异步操作或定时器中，闭包可能会捕获其上下文中的对象（如 &lt;code>self&lt;/code>），这可能导致内存泄漏。以下是对 &lt;code>[weak self]&lt;/code> 的详细解释：&lt;/p></description></item><item><title>类（Class）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-class/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-class/</guid><description>&lt;p>Swift 是一种面向对象（OOP，&lt;strong>Object-Oriented Programming&lt;/strong>）语言，支持面向对象设计中的主要特性，比如 &lt;strong>类&lt;/strong>、&lt;strong>对象&lt;/strong>、&lt;strong>继承&lt;/strong>、&lt;strong>多态&lt;/strong> 和 &lt;strong>封装&lt;/strong>。同时，Swift 提供了许多其他现代化的功能，使面向对象编程更加强大和灵活。&lt;/p></description></item><item><title>泛型（Generics）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-generics/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-generics/</guid><description>&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/generics/">泛型&lt;/a>（Generics）是 Swift 语言中的强大特性，它允许你编写灵活且可重用的代码。通过使用泛型，你可以让函数、方法、类、结构体和枚举适用于任何类型，而不需要重复编写相同的代码。泛型有助于编写更加抽象和通用的代码，从而提高代码的复用性和类型安全性。&lt;/p></description></item><item><title>枚举（Enumerations）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-enum/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-enum/</guid><description>&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations/">枚举&lt;/a>（Enumeration）是 Swift 中的一种强大的数据类型，它允许你定义一组相关的值，并且每个值都被认为是同一类型的一部分。枚举可以帮助你组织代码，更好地表示和处理一组相关的值。&lt;/p></description></item><item><title>官方示例</title><link>https://yindongliang.com/docs/Apple/Xcode/apple-sample-code/</link><pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Xcode/apple-sample-code/</guid><description>&lt;h2 id="官方教程">官方教程&lt;a class="anchor" href="#%e5%ae%98%e6%96%b9%e6%95%99%e7%a8%8b">#&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>SwiftUI Tutorials
&lt;ul>
&lt;li>&lt;a href="https://developer.apple.com/tutorials/swiftui/">https://developer.apple.com/tutorials/swiftui/&lt;/a>&lt;/li>
&lt;li>&lt;strong>Landmarks&lt;/strong>&lt;/li>
&lt;li>SwiftUI essentials
&lt;ul>
&lt;li>Views&lt;/li>
&lt;li>Lists and navigation&lt;/li>
&lt;li>Handling user input&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Drawing and animation&lt;/li>
&lt;li>App design and layout&lt;/li>
&lt;li>Framework intergration
&lt;ul>
&lt;li>UIKit&lt;/li>
&lt;li>watchOS&lt;/li>
&lt;li>macOS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SwiftUI Concepts Tutorial
&lt;ul>
&lt;li>&lt;a href="https://developer.apple.com/tutorials/swiftui-concepts">https://developer.apple.com/tutorials/swiftui-concepts&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Simple Apps Tutorials
&lt;ul>
&lt;li>&lt;a href="https://developer.apple.com/tutorials/sample-apps">https://developer.apple.com/tutorials/sample-apps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Develop apps for Apple platforms
&lt;ul>
&lt;li>&lt;a href="https://developer.apple.com/tutorials/app-dev-training">https://developer.apple.com/tutorials/app-dev-training&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Develop in Swift Tutorials
&lt;ul>
&lt;li>&lt;a href="https://developer.apple.com/tutorials/develop-in-swift">https://developer.apple.com/tutorials/develop-in-swift&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="sample-code">Sample Code&lt;a class="anchor" href="#sample-code">#&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>模块&lt;/th>
 &lt;th>项目名称&lt;/th>
 &lt;th>关联文档&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>SwiftUI&lt;/td>
 &lt;td>WritingApp&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/swiftui/building-a-document-based-app-with-swiftui">Building a document-based app with SwiftUI&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SwiftData&lt;/td>
 &lt;td>SwiftDataFlashCardSample&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/swiftui/building-a-document-based-app-using-swiftdata">Building a document-based app using SwiftData&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CoreData / SwiftData&lt;/td>
 &lt;td>SampleTrips&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/coredata/adopting_swiftdata_for_a_core_data_app/">Adopting SwiftData for a Core Data app&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CoreData&lt;/td>
 &lt;td>CoreDataCloudKitShare&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/coredata/sharing_core_data_objects_between_icloud_users">Sharing Core Data objects between iCloud users&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CloudKit&lt;/td>
 &lt;td>&lt;a href="https://github.com/apple?q=cloudkit-sample&amp;amp;type=repository">https://github.com/apple?q=cloudkit-sample&amp;type=repository&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/icloud/cloudkit/">https://developer.apple.com/icloud/cloudkit/&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SwiftUI / visionOS&lt;/td>
 &lt;td>Destination Video&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/visionos/destination-video">https://developer.apple.com/documentation/visionos/destination-video&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>UIKit&lt;/td>
 &lt;td>Supporting multiple windows on iPad&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/uikit/supporting-multiple-windows-on-ipad">https://developer.apple.com/documentation/uikit/supporting-multiple-windows-on-ipad&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SwiftUI&lt;/td>
 &lt;td>Creating custom container views&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/swiftui/creating-custom-container-views">https://developer.apple.com/documentation/swiftui/creating-custom-container-views&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SwiftUI - Navigation&lt;/td>
 &lt;td>Bringing robust navigation structure to your SwiftUI app&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/swiftui/bringing-robust-navigation-structure-to-your-swiftui-app">https://developer.apple.com/documentation/swiftui/bringing-robust-navigation-structure-to-your-swiftui-app&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SwiftData&lt;/td>
 &lt;td>Filtering and sorting persistent data&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/swiftdata/filtering-and-sorting-persistent-data">https://developer.apple.com/documentation/swiftdata/filtering-and-sorting-persistent-data&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AVFAudio&lt;/td>
 &lt;td>Capturing stereo audio from built-In microphones&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/avfaudio/capturing-stereo-audio-from-built-in-microphones">https://developer.apple.com/documentation/avfaudio/capturing-stereo-audio-from-built-in-microphones&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SwiftUI - Layouts&lt;/td>
 &lt;td>Composing custom layouts with SwiftUI&lt;/td>
 &lt;td>&lt;a href="https://developer.apple.com/documentation/swiftui/composing_custom_layouts_with_swiftui">https://developer.apple.com/documentation/swiftui/composing_custom_layouts_with_swiftui&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>函数（Functions）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-functions/</link><pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-functions/</guid><description>&lt;p>在 Swift 中，函数是一等公民。这意味着函数不仅可以用来执行一系列指令，还可以作为参数传递给其他函数，作为返回值从其他函数中返回，甚至可以嵌套和捕获周围作用域中的变量。下面是 Swift 中函数的详细介绍和使用示例。&lt;/p></description></item><item><title>结构体（Struct）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-struct/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-struct/</guid><description>&lt;h2 id="概念">概念&lt;a class="anchor" href="#%e6%a6%82%e5%bf%b5">#&lt;/a>&lt;/h2>
&lt;p>在 Swift 中，结构体 &lt;code>struct&lt;/code> 是一种非常有用的数据类型。它允许你将一组相关的值组合在一起，并定义它们的行为。结构体在 Swift 中是值类型，与类 &lt;code>class&lt;/code> 的引用类型有显著的区别。&lt;/p></description></item><item><title>协议（Protocol）</title><link>https://yindongliang.com/docs/Apple/Swift/swift-protocol/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-protocol/</guid><description>&lt;p>在 Swift 中，协议（Protocol）是一种为方法、属性和其他需求定义蓝图的方式。协议本身并不实现这些需求，它只是向遵循协议的类型（类、结构体、枚举等）规定这些需求应该存在并实现。&lt;/p></description></item><item><title>@ 符号之属性</title><link>https://yindongliang.com/docs/Apple/Swift/swift-at-sign-attributes/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-at-sign-attributes/</guid><description>&lt;p>&lt;a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes">Attributes&lt;/a>&lt;/p>
&lt;blockquote class='book-hint '>
&lt;p>There are two kinds of attributes in Swift — those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type.&lt;/p>&lt;/blockquote>&lt;p>简单来说，在 Swift 中，只有两种类型的属性：一种用于声明，另一种用于类型。属性提供关于声明或类型的附加信息。&lt;/p></description></item><item><title>$ 美元符号</title><link>https://yindongliang.com/docs/Apple/Swift/swift-dollar-sign/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-dollar-sign/</guid><description>&lt;p>在 Swift 中，&lt;code>$&lt;/code> 符号有几个不同的用途，主要包括适配 SwiftUI 和 Combine 框架中的绑定和发布者，以及 Swift 闭包的简写，它们在不同场景中有不同的含义。&lt;/p>
&lt;h2 id="1-swiftui-中的绑定">1. SwiftUI 中的绑定&lt;a class="anchor" href="#1-swiftui-%e4%b8%ad%e7%9a%84%e7%bb%91%e5%ae%9a">#&lt;/a>&lt;/h2>
&lt;p>在 SwiftUI 中，&lt;code>$&lt;/code> 符号通常用于绑定到某个 &lt;code>@State&lt;/code> 或 &lt;code>@ObservedObject&lt;/code> 属性。在 SwiftUI 中，绑定（&lt;code>Binding&lt;/code>）允许你在视图和数据源之间建立双向数据绑定，从而保持数据的一致性。&lt;/p></description></item><item><title>as</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-as/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-as/</guid><description>&lt;p>在 Swift 中，&lt;code>as&lt;/code> 关键字用于类型转换，它有几种不同的用法，根据具体情况可以转换值的类型或检查类型的兼容性。以下是 &lt;code>as&lt;/code> 关键字的几种常见用法：&lt;/p>
&lt;h2 id="1-向下类型转换downcasting">1. 向下类型转换（Downcasting）&lt;a class="anchor" href="#1-%e5%90%91%e4%b8%8b%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2downcasting">#&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;code>as?&lt;/code> 和 &lt;code>as!&lt;/code>&lt;/strong>&lt;/p></description></item><item><title>associatedtype</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-associatedtype/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-associatedtype/</guid><description>&lt;p>在 Swift 中，&lt;code>associatedtype&lt;/code> 关键字用于定义协议中的关联类型。关联类型为协议声明了一个占位符类型，该具体类型在实现协议时由具体类型来确定。这使得协议更加通用和灵活，因为它们能够处理未指定的类型。&lt;/p></description></item><item><title>extension</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-extension/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-extension/</guid><description>&lt;p>在 Swift 中，&lt;code>extension&lt;/code> 关键词用于为已有的类、结构体、枚举和协议类型添加新功能。这使得你可以在不访问原始源码的情况下扩展类型的行为。Extensions 非常强大和灵活，它们可以：&lt;/p></description></item><item><title>key-path 表达式</title><link>https://yindongliang.com/docs/Apple/Swift/swift-key-path-expression/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-key-path-expression/</guid><description>&lt;p>键路径（Key Path）是 Swift 语言中的一种强大特性，它提供了一种类型安全的方式来引用类型（如结构体或类）中的属性。键路径使得我们能够以一种间接的、动态的、且类型安全的方式访问和修改属性。&lt;/p></description></item><item><title>mutating</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-mutating/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-mutating/</guid><description>&lt;p>在 Swift 中，&lt;code>mutating&lt;/code> 关键字用于标记能改变结构体 &lt;code>struct&lt;/code> 或枚举 &lt;code>enum&lt;/code> 实例中属性的方法。Swift 中的结构体和枚举是值类型，而类 &lt;code>class&lt;/code> 是引用类型。值类型的实例方法默认情况下不能修改实例的属性，因为它们是被拷贝的。为了允许修改，需要在方法前添加 &lt;code>mutating&lt;/code> 关键字。&lt;/p></description></item><item><title>required</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-required/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-required/</guid><description>&lt;p>在 Swift 中，&lt;code>required&lt;/code> 关键字用于&lt;strong>修饰类的构造器（initializer）&lt;/strong>，表示这个构造器在子类中必须被实现。&lt;/p>
&lt;h3 id="关键点">&lt;strong>关键点&lt;/strong>&lt;a class="anchor" href="#%e5%85%b3%e9%94%ae%e7%82%b9">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>required&lt;/code> 修饰的构造器必须在所有继承该类的子类中被实现。&lt;/li>
&lt;li>如果子类不自定义实现这个构造器，Swift 会自动继承并提供默认实现。&lt;/li>
&lt;li>这个关键字通常与支持继承的类（非 &lt;code>final&lt;/code> 修饰的类）相关，以确保子类拥有某些特定的初始化逻辑。&lt;/li>
&lt;/ul>
&lt;h3 id="语法">&lt;strong>语法&lt;/strong>&lt;a class="anchor" href="#%e8%af%ad%e6%b3%95">#&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">Parent&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">required&lt;/span> &lt;span style="color:#76a9f9">init&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 实现构造逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">Child&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">Parent&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">required&lt;/span> &lt;span style="color:#76a9f9">init&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 子类实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">super&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#76a9f9">init&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="required">&lt;strong>&lt;code>required&lt;/code> 的主要特点和用途&lt;/strong>&lt;a class="anchor" href="#required">#&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>确保子类具有特定的初始化行为&lt;/strong>&lt;/p></description></item><item><title>self 和 Self</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-self-and-Self/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-self-and-Self/</guid><description>&lt;h3 id="关键字-self">关键字 &lt;code>self&lt;/code>&lt;a class="anchor" href="#%e5%85%b3%e9%94%ae%e5%ad%97-self">#&lt;/a>&lt;/h3>
&lt;p>在 Swift 中，关键字 &lt;code>self&lt;/code> 有多种用途，主要用于引用当前实例、属性或方法。下面是 &lt;code>self&lt;/code> 的几种常见用途：&lt;/p>
&lt;h4 id="1-引用当前实例">1. 引用当前实例&lt;a class="anchor" href="#1-%e5%bc%95%e7%94%a8%e5%bd%93%e5%89%8d%e5%ae%9e%e4%be%8b">#&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>在类或结构体的方法中，可以使用 &lt;code>self&lt;/code> 来引用当前实例。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">Person&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">name&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">init&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">name&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">greet&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Hello, my name is &lt;/span>&lt;span style="color:#98c379">\(&lt;/span>&lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#98c379">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-区分属性和参数">2. 区分属性和参数&lt;a class="anchor" href="#2-%e5%8c%ba%e5%88%86%e5%b1%9e%e6%80%a7%e5%92%8c%e5%8f%82%e6%95%b0">#&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>当实例的属性名与参数名相同时，可以使用 &lt;code>self&lt;/code> 来区分它们。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">Point&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">x&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">y&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">init&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">y&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">y&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">setCoordinates&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">y&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">x&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">y&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-避免闭包循环引用">3. 避免闭包循环引用&lt;a class="anchor" href="#3-%e9%81%bf%e5%85%8d%e9%97%ad%e5%8c%85%e5%be%aa%e7%8e%af%e5%bc%95%e7%94%a8">#&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>在闭包内部引用当前实例时，可以使用 &lt;code>self&lt;/code> 来避免循环引用。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">MyClass&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">closure&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#abb2bf">(()&lt;/span> &lt;span style="color:#abb2bf">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Void&lt;/span>&lt;span style="color:#abb2bf">)?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">setupClosure&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">closure&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">doSomething&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">doSomething&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Doing something&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-在闭包中弱化引用">4. 在闭包中弱化引用&lt;a class="anchor" href="#4-%e5%9c%a8%e9%97%ad%e5%8c%85%e4%b8%ad%e5%bc%b1%e5%8c%96%e5%bc%95%e7%94%a8">#&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>在闭包中捕获 &lt;code>self&lt;/code> 并使用弱引用来避免循环引用。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">SomeClass&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">var&lt;/span> &lt;span style="color:#dcaeea">closure&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#abb2bf">(()&lt;/span> &lt;span style="color:#abb2bf">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Void&lt;/span>&lt;span style="color:#abb2bf">)?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">setupClosure&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">closure&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span> &lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#76a9f9">weak&lt;/span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span> &lt;span style="color:#76a9f9">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">self&lt;/span>&lt;span style="color:#abb2bf">?.&lt;/span>&lt;span style="color:#aa89ea">doSomething&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">doSomething&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Doing something&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="总结">总结&lt;a class="anchor" href="#%e6%80%bb%e7%bb%93">#&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>self&lt;/code> 是一个特殊的关键字，用于引用当前实例、区分属性和参数、避免循环引用以及在闭包内部使用。&lt;/li>
&lt;li>在大多数情况下，Swift 会自动推断 &lt;code>self&lt;/code> 的引用，因此在许多情况下，可以省略 &lt;code>self&lt;/code> 关键字。&lt;/li>
&lt;/ul>
&lt;h3 id="关键字-self-1">关键字 &lt;code>Self&lt;/code>&lt;a class="anchor" href="#%e5%85%b3%e9%94%ae%e5%ad%97-self-1">#&lt;/a>&lt;/h3>
&lt;p>在 Swift 中，&lt;code>Self&lt;/code> 是一个类型别名，用于引用当前类型。它主要用于泛型和协议中，能够使代码更具灵活性和复用性。&lt;/p></description></item><item><title>some</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-some/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-some/</guid><description>&lt;p>在 Swift 中，&lt;code>some&lt;/code> 关键字用于声明一个“存在类型”（existential type），这是一种抽象类型，可以封装任意类型的值，并保证它符合某个特定的协议。具体来说，&lt;code>some&lt;/code> 关键字通常与协议类型一起使用，用于定义一种限制，表示返回的类型实现了某个协议，但具体是什么类型不重要。最常见的场景是在 SwiftUI 中声明视图的返回类型。在 Swift 5.1 引入的功能中，它被称为“Opaque Return Types”（不透明返回类型）。&lt;/p></description></item><item><title>typealias</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-typealias/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-typealias/</guid><description>&lt;p>&lt;code>typealias&lt;/code> 是 Swift 语言中的一个关键字，用于为已有类型提供一个新的名字。它可以使代码更简洁、更具可读性，并有助于重用复杂类型定义。使用 &lt;code>typealias&lt;/code> 你可以为任何类型（包括基本数据类型、集合类型、函数类型、泛型类型等）创建自定义名称。&lt;/p></description></item><item><title>where</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-where/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/swift-keyword-where/</guid><description>&lt;p>在Swift中，&lt;code>where&lt;/code> 关键词主要用于添加约束条件或过滤条件。它可以在多种情况下使用，以下是一些常见的用法：&lt;/p>
&lt;h2 id="1-在泛型约束中">1. 在泛型约束中：&lt;a class="anchor" href="#1-%e5%9c%a8%e6%b3%9b%e5%9e%8b%e7%ba%a6%e6%9d%9f%e4%b8%ad">#&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">func&lt;/span> &lt;span style="color:#00b1f7">someFunction&lt;/span>&lt;span style="color:#abb2bf">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">T&lt;/span>&lt;span style="color:#abb2bf">&amp;gt;(&lt;/span>&lt;span style="color:#aa89ea">param&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#aa89ea">T&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">T&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Comparable&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 只有当 T 遵循 Comparable 协议时，这个函数才能被调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-在协议扩展中">2. 在协议扩展中：&lt;a class="anchor" href="#2-%e5%9c%a8%e5%8d%8f%e8%ae%ae%e6%89%a9%e5%b1%95%e4%b8%ad">#&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">extension&lt;/span> &lt;span style="color:#ca72ff">Collection&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">Element&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Equatable&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 这个扩展只适用于元素类型遵循 Equatable 协议的集合&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-在-switch-语句的-case-中">3. 在 switch 语句的 case 中：&lt;a class="anchor" href="#3-%e5%9c%a8-switch-%e8%af%ad%e5%8f%a5%e7%9a%84-case-%e4%b8%ad">#&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">switch&lt;/span> &lt;span style="color:#aa89ea">someValue&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">x&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">x&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">case&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">x&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">x&lt;/span> &lt;span style="color:#54b1c7">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">default&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-在-for-in-循环中">4. 在 for-in 循环中：&lt;a class="anchor" href="#4-%e5%9c%a8-for-in-%e5%be%aa%e7%8e%af%e4%b8%ad">#&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#76a9f9">in&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#abb2bf">..&lt;/span>&lt;span style="color:#d19a66">100&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#54b1c7">%&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#abb2bf">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// 只打印偶数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-在可选绑定中">5. 在可选绑定中：&lt;a class="anchor" href="#5-%e5%9c%a8%e5%8f%af%e9%80%89%e7%bb%91%e5%ae%9a%e4%b8%ad">#&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#76a9f9">let&lt;/span> &lt;span style="color:#dcaeea">value&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">optionalValue&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">value&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">10&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 只有当 optionalValue 不为 nil 且大于 10 时执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-在关联类型声明中">6. 在关联类型声明中：&lt;a class="anchor" href="#6-%e5%9c%a8%e5%85%b3%e8%81%94%e7%b1%bb%e5%9e%8b%e5%a3%b0%e6%98%8e%e4%b8%ad">#&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">protocol&lt;/span> &lt;span style="color:#ca72ff">Container&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">associatedtype&lt;/span> &lt;span style="color:#aa89ea">Item&lt;/span> &lt;span style="color:#76a9f9">where&lt;/span> &lt;span style="color:#aa89ea">Item&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#e5c07b">Equatable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="小结">小结&lt;a class="anchor" href="#%e5%b0%8f%e7%bb%93">#&lt;/a>&lt;/h2>
&lt;p>总的来说，&lt;code>where&lt;/code> 关键词允许你在各种上下文中添加额外的条件或约束，使得代码更加灵活和精确。它帮助你更好地控制类型、值的范围，以及在何种条件下执行特定的代码。&lt;/p></description></item><item><title>可选类型</title><link>https://yindongliang.com/docs/Apple/Swift/swift-optional-type/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/swift-optional-type/</guid><description>&lt;p>Swift 的可选类型（Optional）是一种非常强大的特性，用于表示变量可能有值，也可能为 &lt;code>nil&lt;/code>，即没有值。可选类型确保在处理未初始化或缺失值时代码更加安全和清晰，减少了运行时错误。&lt;/p></description></item></channel></rss>