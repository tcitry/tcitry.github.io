<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>软件工程 on LYon's Blog</title><link>https://yindongliang.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link><description>Recent content in 软件工程 on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 18 Oct 2025 13:05:57 +0800</lastBuildDate><atom:link href="https://yindongliang.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>如何写出垃圾代码</title><link>https://yindongliang.com/weekly/2024/2024-W45/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://yindongliang.com/weekly/2024/2024-W45/</guid><description>&lt;p>看完了《太白金星有点烦》，这个视角的西游题材真是头一次看到，但是逻辑上好像还真没什么毛病，就是后面结尾部分明显作者不想继续编了，但也还好，要展现的视角已经足够读者理解，原来我之前看的西游都是「揭帖」。&lt;/p></description></item><item><title>人件</title><link>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/peopleware/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/peopleware/</guid><description>&lt;p>谁最应该看这本书？我认为答案是程序员的管理者。很难想象，这本《人件》（Peopleware）是一本最初于 1987 年出版软件工程领域的书，1992 年出版了第二版，2003 年开始在国内发行，现在 2023 年通读一遍依然能够产生强烈认同。所以，这 35 年间到底发生了什么，什么才是永恒的。但并不是意味着我应该早点读到这本书里似乎“永恒”的道理，现在我刚好有几年的开发经验，也许如今才正是时候。&lt;/p></description></item><item><title>Unix 编程艺术</title><link>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/taoup/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/taoup/</guid><description>&lt;p>&lt;a href="https://book.douban.com/subject/1467587/">Unix 编程艺术&lt;/a> 这本书主要介绍了 Unix 系统领域的一些文化和设计哲学，本书最初在2006 年出版，译者在序言里也说发现本书作者 ESR（Eric S·Raymond）是个&lt;em>美国愤青&lt;/em>，所以书中的内容也肯定不是教科书的论调，很多观点随着时间发展到现在，需要读者自己思考并做出判断。&lt;/p></description></item><item><title>程序员修炼之道</title><link>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</guid><description>&lt;p>&lt;a href="https://book.douban.com/subject/35006892/">程序员修炼之道：通向务实的最高境界（第2版）&lt;/a>&lt;/p>
&lt;p>相比第一版，书中大约三分之一的主题是全新的，而其余的大部分都被部分或全部重写了。作者再版的目的是，让内容变得更清晰、更贴切，并在某种程度上不受时间的影响。所以可以直接阅读第二版了。&lt;/p></description></item><item><title>一些定律</title><link>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/some-laws/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/some-laws/</guid><description>&lt;h2 id="摩尔定律">摩尔定律&lt;a class="anchor" href="#%e6%91%a9%e5%b0%94%e5%ae%9a%e5%be%8b">#&lt;/a>&lt;/h2>
&lt;p>&lt;em>摩尔定律&lt;/em>是英特尔创始人之一戈登·摩尔的经验之谈，其核心内容为：&lt;strong>集成电路上可以容纳的晶体管数目在大约每经过18个月便会增加一倍&lt;/strong>。&lt;/p>
&lt;h2 id="康威定律">康威定律&lt;a class="anchor" href="#%e5%ba%b7%e5%a8%81%e5%ae%9a%e5%be%8b">#&lt;/a>&lt;/h2>
&lt;p>计算机科学家 &lt;a href="https://zh.wikipedia.org/wiki/%e9%a9%ac%e5%b0%94%e6%96%87%c2%b7%e5%ba%b7%e5%a8%81">马尔文·康威&lt;/a> 1976 年提出，&lt;strong>设计系统的架构受制于产生这些设计的组织的沟通结构&lt;/strong>。&lt;/p></description></item><item><title>“结点”还是“节点”？</title><link>https://yindongliang.com/posts/node-or-node/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/node-or-node/</guid><description>&lt;h2 id="结点-还是-节点-">“结点” 还是 “节点” ？&lt;a class="anchor" href="#%e7%bb%93%e7%82%b9-%e8%bf%98%e6%98%af-%e8%8a%82%e7%82%b9-">#&lt;/a>&lt;/h2>
&lt;p>刷题时，总会遇到“节点”和“结点”的词汇混用，非常困惑，查了一下，一般认为：&lt;/p>
&lt;ol>
&lt;li>节点是一个实体，它具有处理的能力，比如网络上的一台计算机。&lt;/li>
&lt;li>结点是一个交叉点、一个标记，算法中的点一般都称为结点，数据集合中的每一个数据元素都用中间标有元素值的方框来表示，我们称它为结点。&lt;/li>
&lt;/ol>
&lt;p>所以我们在看《算法导论》的时候，大部分是结点。在讨论服务架构的时候，一般就是节点了，英文里好像都是“node”。另外说时间的时候，一般我们还是说时间“节点”。&lt;/p></description></item><item><title>浅谈 Django-REST-Framework 的设计与源码</title><link>https://yindongliang.com/posts/talk-about-django-rest-framework/</link><pubDate>Thu, 20 Oct 2016 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/talk-about-django-rest-framework/</guid><description>&lt;p>最近又重新接触 DRF，翻看文档发现，当时很难理解的东西，如今一看就懂了，顺带看了源码，也比较容易理解，至少比 Django 的源码简单不少。下面开始从 DRF 的设计和源码两个方面，结合自己的看法，谈谈DRF。&lt;/p></description></item></channel></rss>