<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>内存管理 on LYon's Blog</title><link>https://yindongliang.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><description>Recent content in 内存管理 on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 18 Oct 2025 13:05:57 +0800</lastBuildDate><atom:link href="https://yindongliang.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>语言基础</title><link>https://yindongliang.com/docs/Rust/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Rust/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid><description>&lt;p>&lt;a href="https://www.rust-lang.org/">Rust&lt;/a> 是一门注重安全（safety）、速度（speed）和并发（concurrency）的现代系统编程语言。Rust 通过内存安全来实现以上目标，但不使用垃圾回收机制（garbage collection, GC）。&lt;/p></description></item><item><title>Go 语言的垃圾回收机制概览</title><link>https://yindongliang.com/posts/go-garbage-collector/</link><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/go-garbage-collector/</guid><description>&lt;p>之前已经看过了 &lt;a href="https://yindongliang.com/posts/GC-algorithms">常见的垃圾回收算法&lt;/a>，有了一定的基础，现在再来了解下 Go 语言的垃圾回收机制。&lt;/p>
&lt;h2 id="三色抽象">三色抽象&lt;a class="anchor" href="#%e4%b8%89%e8%89%b2%e6%8a%bd%e8%b1%a1">#&lt;/a>&lt;/h2>
&lt;p>Go 语言如今已经演变成增量式的垃圾回收策略，即不是一口气运行 GC，而是和 Mutator 交替运行的，因此不会长时间妨碍到 Mutator 的运行。Go 语言增量式回收是基于“标记-清除”算法的一种优化思路，具体的实现是三色标记法。&lt;/p></description></item><item><title>Go 语言的内存管理机制概览</title><link>https://yindongliang.com/posts/go-memory-management/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/go-memory-management/</guid><description>&lt;p>程序中的数据和变量在运行时会被分配到程序所在的虚拟内存中，内存空间包含两个重要的区域：堆（heap）和栈（stack），函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存由编译器进行管理。&lt;/p></description></item><item><title>常见的垃圾回收算法</title><link>https://yindongliang.com/posts/GC-algorithms/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/GC-algorithms/</guid><description>&lt;p>本来想直接看下 Go 的垃圾回收机制，但是发现自己现在对内存管理和垃圾回收的了解都比较少，所以只能先来研究下常见的垃圾回收算法了，本篇即是《&lt;a href="https://book.douban.com/subject/26821357/">垃圾回收的算法与实现&lt;/a>》的学习笔记，目标是能够描述清楚各种 GC 算法的复杂度、优缺点。&lt;/p></description></item><item><title>操作系统的内存管理机制</title><link>https://yindongliang.com/posts/memory-management-in-os/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://yindongliang.com/posts/memory-management-in-os/</guid><description>&lt;p>继续复习操作系统，话说随着 CPU 计算资源的性能开始过剩，压在内存身上的担子越来越重了，堪称新时期的性能瓶颈，对操作系统来说，内存管理机制也要进行近乎极致的优化才可以充分发挥 CPU 的正常水平。&lt;/p></description></item></channel></rss>