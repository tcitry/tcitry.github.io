<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gemini on LYon's Blog</title><link>https://yindongliang.com/tags/Gemini/</link><description>Recent content in Gemini on LYon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 08 Sep 2025 10:08:33 +0800</lastBuildDate><atom:link href="https://yindongliang.com/tags/Gemini/index.xml" rel="self" type="application/rss+xml"/><item><title>AppEnum</title><link>https://yindongliang.com/docs/Apple/Frameworks/App-Intents/AppEnum/</link><pubDate>Thu, 22 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Frameworks/App-Intents/AppEnum/</guid><description>&lt;p>&lt;code>AppEnum&lt;/code> 是 App Intents 框架中一个非常重要的协议，它允许你定义自定义的枚举类型。这些枚举类型可以作为你的 &lt;code>AppIntent&lt;/code>（应用意图）中的参数类型，或者在 &lt;code>AppEntity&lt;/code>（应用实体）中作为属性的类型。使用 &lt;code>AppEnum&lt;/code> 可以为用户提供一组固定的、易于理解的选项，从而增强 Siri、快捷指令以及其他系统服务与你应用交互的体验。&lt;/p></description></item><item><title>Focus Filters</title><link>https://yindongliang.com/docs/Apple/Frameworks/App-Intents/Focus-Filters/</link><pubDate>Thu, 22 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Frameworks/App-Intents/Focus-Filters/</guid><description>&lt;p>我们来详细了解一下 App Intents 框架与苹果的“专注模式”(Focus) 功能是如何结合的，这主要通过&lt;strong>专注过滤器 (Focus Filters)&lt;/strong> 来实现。&lt;/p>
&lt;h2 id="一专注模式-focus-简述">&lt;strong>一、专注模式 (Focus) 简述&lt;/strong>&lt;a class="anchor" href="#%e4%b8%80%e4%b8%93%e6%b3%a8%e6%a8%a1%e5%bc%8f-focus-%e7%ae%80%e8%bf%b0">#&lt;/a>&lt;/h2>
&lt;p>首先，简单回顾一下什么是“专注模式”。这是苹果操作系统（iOS, iPadOS, macOS）中的一项功能，允许用户根据当前进行的活动（如工作、个人事务、睡眠、驾驶、健身等）自定义哪些应用和联系人可以通知他们，并可以定制主屏幕、锁定屏幕的布局。目的是帮助用户减少干扰，更好地专注于当前任务。&lt;/p></description></item><item><title>WidgetKit、ActivityKit 和 App Intents 关系和区别</title><link>https://yindongliang.com/docs/Apple/Frameworks/WidgetKit/WidgetKitActivityKit-%E5%92%8C-App-Intents-%E5%85%B3%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Frameworks/WidgetKit/WidgetKitActivityKit-%E5%92%8C-App-Intents-%E5%85%B3%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/</guid><description>&lt;p>好的，很高兴为你讲解 WidgetKit、ActivityKit 和 App Intents 这三个苹果框架。对于初学者来说，理解它们各自是什么、做什么以及它们之间如何协同工作确实很重要。&lt;/p></description></item><item><title>fileprivate</title><link>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/fileprivate/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Swift/%E5%85%B3%E9%94%AE%E5%AD%97/fileprivate/</guid><description>&lt;p>好的，我们来详细了解一下 Swift 中的 &lt;code>fileprivate&lt;/code> 关键字，以及它和 &lt;code>private&lt;/code> 关键字之间的区别。&lt;/p>
&lt;p>这两个关键字都属于 Swift 的访问控制（Access Control）体系，用于限制代码中某些部分的访问权限，从而帮助你隐藏实现细节，构建清晰的模块接口。&lt;/p></description></item><item><title>IAP 支付流程</title><link>https://yindongliang.com/docs/Apple/Frameworks/StoreKit/In-App-Purchase/</link><pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Frameworks/StoreKit/In-App-Purchase/</guid><description>&lt;p>StoreKit 2 是苹果在 WWDC 2021 (iOS 15+, macOS 12+, watchOS 8+, tvOS 15+) 推出的现代化应用内购买框架。它基于 Swift 的 &lt;code>async/await&lt;/code> 语法，大大简化了产品获取、交易处理和凭据验证的流程。&lt;/p>
&lt;h3 id="storekit-2-核心体系概览">StoreKit 2 核心体系概览&lt;a class="anchor" href="#storekit-2-%e6%a0%b8%e5%bf%83%e4%bd%93%e7%b3%bb%e6%a6%82%e8%a7%88">#&lt;/a>&lt;/h3>
&lt;p>StoreKit 2 的工作流程更加简洁和安全：&lt;/p></description></item><item><title>SubscriptionStoreView</title><link>https://yindongliang.com/docs/Apple/Frameworks/StoreKit/SubscriptionStoreView/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Frameworks/StoreKit/SubscriptionStoreView/</guid><description>&lt;p>好的，我们来详细了解一下 &lt;code>SubscriptionStoreView&lt;/code>，这是苹果在 StoreKit 中引入的一个强大的 SwiftUI 组件，旨在极大简化应用内订阅购买界面的构建。&lt;/p></description></item><item><title>ViewModel 和 Context 概念</title><link>https://yindongliang.com/docs/Apple/Xcode/viewmodel-%E5%92%8C-context/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://yindongliang.com/docs/Apple/Xcode/viewmodel-%E5%92%8C-context/</guid><description>&lt;p>在 iOS Swift 开发中，Context 和 ViewModel 是两个不同层级的概念，它们分别服务于不同的架构模式和代码组织需求。以下是两者的核心区别与联系：&lt;/p>
&lt;hr>
&lt;h2 id="一核心职责对比">一、核心职责对比&lt;a class="anchor" href="#%e4%b8%80%e6%a0%b8%e5%bf%83%e8%81%8c%e8%b4%a3%e5%af%b9%e6%af%94">#&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>​&lt;strong>​Context（上下文）​&lt;/strong>​&lt;br>
• 角色定位：&lt;/li>
&lt;/ol>
&lt;p>Context 是协调不同组件间交互的“中介者”，通常用于管理多个模块（如 Controller、Presenter、ViewModel）之间的通信和生命周期。它的核心目标是解耦组件间的直接依赖，通过统一的协议或路由机制传递消息。&lt;br>
• 功能特性：&lt;/p></description></item></channel></rss>